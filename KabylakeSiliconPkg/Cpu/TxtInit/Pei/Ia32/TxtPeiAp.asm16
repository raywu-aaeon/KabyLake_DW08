;; @file
;  This file contains AP initialization code in PEI phase
;
; @copyright
;  INTEL CONFIDENTIAL
;  Copyright 2005 - 2016 Intel Corporation.
;
;  The source code contained or described herein and all documents related to the
;  source code ("Material") are owned by Intel Corporation or its suppliers or
;  licensors. Title to the Material remains with Intel Corporation or its suppliers
;  and licensors. The Material may contain trade secrets and proprietary and
;  confidential information of Intel Corporation and its suppliers and licensors,
;  and is protected by worldwide copyright and trade secret laws and treaty
;  provisions. No part of the Material may be used, copied, reproduced, modified,
;  published, uploaded, posted, transmitted, distributed, or disclosed in any way
;  without Intel's prior express written permission.
;
;  No license under any patent, copyright, trade secret or other intellectual
;  property right is granted to or conferred upon you by disclosure or delivery
;  of the Materials, either expressly, by implication, inducement, estoppel or
;  otherwise. Any license under such intellectual property rights must be
;  express and approved by Intel in writing.
;
;  Unless otherwise agreed by Intel in writing, you may not remove or alter
;  this notice or any other notice embedded in Materials by Intel or
;  Intel's suppliers or licensors in any way.
;
;  This file contains an 'Intel Peripheral Driver' and is uniquely identified as
;  "Intel Reference Module" and is licensed for Intel CPUs and chipsets under
;  the terms of your license agreement with Intel or your vendor. This file may
;  be modified by the user, subject to additional terms of the license agreement.
;
;@par Specification
;;

    .XLIST
;AMI_OVERRIDE_CPU0012_START >>> Fix Linux build error    
;    include txt.inc
    include Txt.inc
;AMI_OVERRIDE_CPU0012_END <<< Fix Linux build error    
    .LIST

    .686p
    .MMX

TxtSegment16 SEGMENT PARA USE16 PUBLIC 'TXTCODE'

;-------------------------------------------------------------------------------------
;  Entry point of AP startup code. Target of SIPI vector.
;-------------------------------------------------------------------------------------

;-----------------------------------------------------------------------------
;
; This point is 4K aligned somewhere in boot block.
;
        jmp     code16bitStart

        ORG     10h

GDTAddress:
        dw      GDTLen                  ; The length of the GDT
;AMI_OVERRIDE_CPU0001_START >>>
        db  20h,00h                          ; ptr to GDT
    	db  0FEh,0FFh
;        dd      OFFSET GDTStart         ; The 32-bit physical address
;AMI_OVERRIDE_CPU0001_END <<< 

        ;
        ; AP GDT table
        ;
        ALIGN 16
GDTStart    LABEL   BYTE

        SEG_DESCRIPTOR  <>              ; Unused  (selector 0)

;
; Selector 8
;
TXT_DATA32  EQU $ - GDTStart

TXT_DATA32_OFF  SEG_DESCRIPTOR  {0FFFFh,\
                0000h,  \
                00h,    \
                <SEG_PRESENT, 0, APPLSEGMENT, DATATYPE>,    \
                <PAGEGRANULARITY, BIGSEGMENT,,,0Fh>,        \
                00h}

GDTLen      EQU $ - GDTStart - 1


code16bitStart:

;L1:    jmp     $
        cli

        mov     si, OFFSET GDTAddress
        ;
        ; Set DS and ES limits
        ;
        db      66h         ; Force 32 bit load
        lgdt    FWORD PTR cs:[si]

        mov     eax, CR0        ; get CPU control word 0
        or      al, 01          ; enable CPU protected mode
        mov     CR0, eax        ; write back to CPU control word 0
        jmp     target

target:

        mov     ax, TXT_DATA32
        mov     ds, ax          ; set DS limit
        mov     es, ax          ; set ES limit
        mov     fs, ax          ; set FS limit
        mov     gs, ax          ; set GS limit
        mov     ss, ax          ; set SS limit

        ;
        ; Disable protected mode
        ;
        mov     eax, CR0        ; get CPU control word 0
        and     al, 0FEh        ; disable CPU protected mode
        mov     CR0, eax        ; write back to CPU control word 0
        jmp     target3

target3:
        xor     ax, ax
        mov     ds, ax          ; set flat DS
        mov     es, ax          ; set flat ES

        ;
        ; Fall through to main code
        ;
;-------------------------------------------------------------------------------------
;
;  Cache initialization per TXT BIOS spec (Stackless)
;
;-------------------------------------------------------------------------------------

TxtPrepareCacheForAcModuleRetNS PROC NEAR PUBLIC

        ;
        ; Ensure CR0.CD and CR0.NW are cleared
        ;
        mov     eax, cr0    ;
        and     eax, NOT (CR0_CD_MASK + CR0_NW_MASK)
        mov     cr0, eax
        ;
        ; Fall through
        ;
TxtPrepareCacheForAcModuleRetNS ENDP

;-------------------------------------------------------------------------------------
;  MCA registers are cleaned (Stackless)
;-------------------------------------------------------------------------------------

TxtCleanMcaNS PROC NEAR PUBLIC
        ;
        ; check smx, skip if smx  not supported
        ;
        mov     eax, cr4
        or      eax, CR4_SMXE
        jne     Continue
        ;
        ; check getsec[capabilities], skip if parameters not supported
        ;
        mov     eax, CAPABILITIES          ; eax = CAPABILITIES

        _GETSEC

        or      ebx, ebx
        jnz     Continue

        or      eax, CAPABILITIES_PARAM
        jne     Continue
        ;
        ; check getsec[parameters], skip MCi clr if set
        ;
        mov     eax, PARAMETERS          ; eax = PARAMETERS

        _GETSEC

        or      eax, PARAMETERS_MCi_HDL
        je      Continue
        ;
        ; Clean MC[i]_STATUS MSR registers
        ; SCLEAN will generate GPF otherwise
        ;
        ;mov    ecx, MCG_CAP
        ;rdmsr
        mov     al, 5           ; skl only supports clear mc0-4 early PEI phase

        movzx   ebx, al     ; Bank count to ebx
        sub     eax, eax    ; Write 0 into all MCi_STATUS registers
        sub     edx, edx
        mov     ecx, MC0_STATUS

McaErrorCleanLoopStart:
        wrmsr
        dec     ebx
        jz      Continue
        add     ecx, 4      ; Number of MSRs per bank
        jmp     McaErrorCleanLoopStart

Continue:
        ;
        ; Fall through
        ;
TxtCleanMcaNS ENDP

;-------------------------------------------------------------------------------------
;
;  APs enter halt loop (Stackless)
;
;-------------------------------------------------------------------------------------

TxtHaltLoopNS PROC NEAR PUBLIC

        mov     eax, CR4
        or      eax, CR4_OSFXSR + CR4_DE + CR4_SMXE
        mov     CR4, eax

        mov     eax, 1
        cpuid
        shr     ebx, 24                 ; ebx is initial APIC ID shifted rightmostly

        ;
        ; Since accesses to semaphore cannot be serialized, accesses among different CPUs
        ; are orchestrated as following:
        ; BSP will only READ semaphore
        ; All APs will keep READING semaphore until its value EQUALS to that AP's
        ; APIC ID minus 1. Only AFTER that AP will INCREMENT semaphore.
        ; This allows BSP to judge WHEN all APs finished.
        ;
        mov     ecx, [TXT_PUBLIC_BASE + SEMAPHORE]

keepWaiting:
        mov     eax, [ecx]
        inc     eax
        cmp     eax, ebx
        jb      keepWaiting
        ja      hltLoop
        mov     [ecx], eax

hltLoop:
        cli
        hlt
        jmp     hltLoop

TxtHaltLoopNS ENDP

TxtSegment16    ENDS

END

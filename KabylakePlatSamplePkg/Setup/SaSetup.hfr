/** @file

 @copyright
  INTEL CONFIDENTIAL
  Copyright 2014 - 2019 Intel Corporation.

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.

  This file contains a 'Sample Driver' and is licensed as such under the terms
  of your license agreement with Intel or your vendor. This file may be modified
  by the user, subject to the additional terms of the license agreement.

@par Specification
**/

// AMI_OVERRIDE_START
#ifdef FORM_SET_TYPEDEF
    #include <Setup/SaSetup.h>
    #include <PlatformBoardId.h>
#endif

#ifdef CHIPSET_FORM_SET

#ifdef FORM_SET_GOTO
  // Define goto commands for the forms defined in this file
  goto NB_FORM_ID, 
    prompt = STRING_TOKEN(STR_NB_FORM),
    help = STRING_TOKEN(STR_NB_FORM_HELP);
    
#endif

#ifdef FORM_SET_FORM
// AMI_OVERRIDE_END     
    // Define forms

    form formid = AUTO_ID(MEMORY_FORM_ID),
    title = STRING_TOKEN(STR_MEMORY_FORM_TITLE);

//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Showed >>
      SUBTITLE(STRING_TOKEN(STR_MEMORY_FORM_SUBTITLE))
      SEPARATOR

      text
        help   = STRING_TOKEN(STR_MEMORY_FREQ_HELP),
        text   = STRING_TOKEN(STR_MEMORY_FREQ_NAME),
        text   = STRING_TOKEN(STR_MEMORY_FREQ_VALUE),
        flags  = 0,
        key    = 0;

      SEPARATOR
      text
        help   = STRING_TOKEN(STR_DIMM_CH_SLT_SUBTITLE_HELP),
        text   = STRING_TOKEN(STR_DIMM_CH0_SLT0_FORM_SUBTITLE),
        text   = STRING_TOKEN(STR_DIMM_CH0_SLT0_STATUS),
        flags  = 0,
        key    = 0;

      suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[OFFSET_0] == 0x0;
        text
          help   = STRING_TOKEN(STR_DIMM_SIZE_HELP),
          text   = STRING_TOKEN(STR_DIMM_SIZE_NAME),
          text   = STRING_TOKEN(STR_DIMM_SIZE_CH0_SLT0_VALUE),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(STR_DIMM_NUM_RANKS_HELP),
          text   = STRING_TOKEN(STR_DIMM_NUM_RANKS_NAME),
          text   = STRING_TOKEN(STR_DIMM_CH0_SLT0_RANK_VALUE),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(STR_DIMM_MFG_HELP),
          text   = STRING_TOKEN(STR_DIMM_MFG_NAME),
          text   = STRING_TOKEN(STR_DIMM_CH0_SLT0_MFG_VALUE),
          flags  = 0,
          key    = 0;
      endif;

      text
        help   = STRING_TOKEN(STR_DIMM_CH_SLT_SUBTITLE_HELP),
        text   = STRING_TOKEN(STR_DIMM_CH1_SLT0_FORM_SUBTITLE),
        text   = STRING_TOKEN(STR_DIMM_CH1_SLT0_STATUS),
        flags  = 0,
        key    = 0;

      suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[OFFSET_2] == 0x0;
        text
          help   = STRING_TOKEN(STR_DIMM_SIZE_HELP),
          text   = STRING_TOKEN(STR_DIMM_SIZE_NAME),
          text   = STRING_TOKEN(STR_DIMM_SIZE_CH1_SLT0_VALUE),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(STR_DIMM_NUM_RANKS_HELP),
          text   = STRING_TOKEN(STR_DIMM_NUM_RANKS_NAME),
          text   = STRING_TOKEN(STR_DIMM_CH1_SLT0_RANK_VALUE),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(STR_DIMM_MFG_HELP),
          text   = STRING_TOKEN(STR_DIMM_MFG_NAME),
          text   = STRING_TOKEN(STR_DIMM_CH1_SLT0_MFG_VALUE),
          flags  = 0,
          key    = 0;
      endif;

      SEPARATOR

      //
      // Max TOLUD setup option
      //
      oneof varid    = SA_SETUP.MaxTolud,
        prompt   = STRING_TOKEN(STR_MAX_TOLUD_PROMPT),
        help     = STRING_TOKEN(STR_MAX_TOLUD_HELP),
// AMI_OVERRIDE_START                        
//        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeSds
//                             ? MAX_TOLUD_DYNAMIC:MAX_TOLUD_1G), defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(STR_MAX_TOLUD_DYNAMIC_STRING), value = MAX_TOLUD_DYNAMIC, flags = RESET_REQUIRED;
// AMI_OVERRIDE_END	
        option text = STRING_TOKEN(STR_MAX_TOLUD_1G_STRING),      value = MAX_TOLUD_1G,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_25G_STRING),   value = MAX_TOLUD_1_25G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_5G_STRING),    value = MAX_TOLUD_1_5G,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_75G_STRING),   value = MAX_TOLUD_1_75G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2G_STRING),      value = MAX_TOLUD_2G,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_25G_STRING),   value = MAX_TOLUD_2_25G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_5G_STRING),    value = MAX_TOLUD_2_5G,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_75G_STRING),   value = MAX_TOLUD_2_75G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_3G_STRING),      value = MAX_TOLUD_3G,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_3_25G_STRING),   value = MAX_TOLUD_3_25G,   flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_3_5G_STRING),    value = MAX_TOLUD_3_5G,    flags = RESET_REQUIRED;
      endoneof;
//ray_override / [XI-Tuning] Too much Memory Used by PCIe Devices under Windows 7 / Modified >>
// MAX_TOLUD_DYNAMIC -> MAX_TOLUD_3_25G
//ray_override / [XI-Tuning] Too much Memory Used by PCIe Devices under Windows 7 / Modified <<
//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Showed <<

//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Hided >>
suppressif TRUE ;

      goto MEMORY_THERMAL_CONFIG_FORM_ID,
        prompt = STRING_TOKEN(STR_MEMORY_THERMAL_CONFIG_FORM_TITLE),
        help = STRING_TOKEN(STR_MEMORY_THERMAL_CONFIG_FORM_HELP);

      goto MEM_TRAINING_FORM_ID,
        prompt  = STRING_TOKEN(STR_MEMORY_TRAINING_ALGOS_PROMPT),
        help    = STRING_TOKEN(STR_MEMORY_TRAINING_ALGOS_HELP);


      SUBTITLE(STRING_TOKEN(STR_MEMORY_FORM_SUBTITLE))
      SEPARATOR

      text
        help   = STRING_TOKEN(STR_MRC_REV_HELP),
        text   = STRING_TOKEN(STR_MRC_REV_NAME),
        text   = STRING_TOKEN(STR_MRC_REV_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_FREQ_HELP),
        text   = STRING_TOKEN(STR_MEMORY_FREQ_NAME),
        text   = STRING_TOKEN(STR_MEMORY_FREQ_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_MEMORY_TIMINGS_HELP),
        text   = STRING_TOKEN(STR_MEMORY_TIMINGS_NAME),
        text   = STRING_TOKEN(STR_MEMORY_TIMINGS_VALUE),
        flags  = 0,
        key    = 0;

      SEPARATOR
      text
        help   = STRING_TOKEN(STR_DIMM_CH_SLT_SUBTITLE_HELP),
        text   = STRING_TOKEN(STR_DIMM_CH0_SLT0_FORM_SUBTITLE),
        text   = STRING_TOKEN(STR_DIMM_CH0_SLT0_STATUS),
        flags  = 0,
        key    = 0;

      suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[OFFSET_0] == 0x0;
        text
          help   = STRING_TOKEN(STR_DIMM_SIZE_HELP),
          text   = STRING_TOKEN(STR_DIMM_SIZE_NAME),
          text   = STRING_TOKEN(STR_DIMM_SIZE_CH0_SLT0_VALUE),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(STR_DIMM_NUM_RANKS_HELP),
          text   = STRING_TOKEN(STR_DIMM_NUM_RANKS_NAME),
          text   = STRING_TOKEN(STR_DIMM_CH0_SLT0_RANK_VALUE),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(STR_DIMM_MFG_HELP),
          text   = STRING_TOKEN(STR_DIMM_MFG_NAME),
          text   = STRING_TOKEN(STR_DIMM_CH0_SLT0_MFG_VALUE),
          flags  = 0,
          key    = 0;
      endif;

      text
          help   = STRING_TOKEN(STR_DIMM_CH_SLT_SUBTITLE_HELP),
          text   = STRING_TOKEN(STR_DIMM_CH0_SLT1_FORM_SUBTITLE),
          text   = STRING_TOKEN(STR_DIMM_CH0_SLT1_STATUS),
          flags  = 0,
          key    = 0;

      suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[OFFSET_1] == 0x0;
        text
          help   = STRING_TOKEN(STR_DIMM_SIZE_HELP),
          text   = STRING_TOKEN(STR_DIMM_SIZE_NAME),
          text   = STRING_TOKEN(STR_DIMM_SIZE_CH0_SLT1_VALUE),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(STR_DIMM_NUM_RANKS_HELP),
          text   = STRING_TOKEN(STR_DIMM_NUM_RANKS_NAME),
          text   = STRING_TOKEN(STR_DIMM_CH0_SLT1_RANK_VALUE),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(STR_DIMM_MFG_HELP),
          text   = STRING_TOKEN(STR_DIMM_MFG_NAME),
          text   = STRING_TOKEN(STR_DIMM_CH0_SLT1_MFG_VALUE),
          flags  = 0,
          key    = 0;
      endif;

      text
        help   = STRING_TOKEN(STR_DIMM_CH_SLT_SUBTITLE_HELP),
        text   = STRING_TOKEN(STR_DIMM_CH1_SLT0_FORM_SUBTITLE),
        text   = STRING_TOKEN(STR_DIMM_CH1_SLT0_STATUS),
        flags  = 0,
        key    = 0;

      suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[OFFSET_2] == 0x0;
        text
          help   = STRING_TOKEN(STR_DIMM_SIZE_HELP),
          text   = STRING_TOKEN(STR_DIMM_SIZE_NAME),
          text   = STRING_TOKEN(STR_DIMM_SIZE_CH1_SLT0_VALUE),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(STR_DIMM_NUM_RANKS_HELP),
          text   = STRING_TOKEN(STR_DIMM_NUM_RANKS_NAME),
          text   = STRING_TOKEN(STR_DIMM_CH1_SLT0_RANK_VALUE),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(STR_DIMM_MFG_HELP),
          text   = STRING_TOKEN(STR_DIMM_MFG_NAME),
          text   = STRING_TOKEN(STR_DIMM_CH1_SLT0_MFG_VALUE),
          flags  = 0,
          key    = 0;
      endif;

      text
          help   = STRING_TOKEN(STR_DIMM_CH_SLT_SUBTITLE_HELP),
          text   = STRING_TOKEN(STR_DIMM_CH1_SLT1_FORM_SUBTITLE),
          text   = STRING_TOKEN(STR_DIMM_CH1_SLT1_STATUS),
          flags  = 0,
          key    = 0;

      suppressif ideqval SETUP_VOLATILE_DATA.DimmPresent[OFFSET_3] == 0x0;
        text
          help   = STRING_TOKEN(STR_DIMM_SIZE_HELP),
          text   = STRING_TOKEN(STR_DIMM_SIZE_NAME),
          text   = STRING_TOKEN(STR_DIMM_SIZE_CH1_SLT1_VALUE),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(STR_DIMM_NUM_RANKS_HELP),
          text   = STRING_TOKEN(STR_DIMM_NUM_RANKS_NAME),
          text   = STRING_TOKEN(STR_DIMM_CH1_SLT1_RANK_VALUE),
          flags  = 0,
          key    = 0;
        text
          help   = STRING_TOKEN(STR_DIMM_MFG_HELP),
          text   = STRING_TOKEN(STR_DIMM_MFG_NAME),
          text   = STRING_TOKEN(STR_DIMM_CH1_SLT1_MFG_VALUE),
          flags  = 0,
          key    = 0;
      endif;

      SEPARATOR

      text
        help   = STRING_TOKEN(STR_MRC_RATIO_MOVED_HELP),
        text   = STRING_TOKEN(STR_MRC_RATIO_MOVED),
        flags  = 0,
        key    = 0;

      oneof varid  = SA_SETUP.MrcSafeConfig,
        prompt   = STRING_TOKEN (STR_MRC_ULT_SAFE_CONFIG_PROMPT),
        help     = STRING_TOKEN (STR_MRC_ULT_SAFE_CONFIG_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
      endoneof;


      oneof varid  = SA_SETUP.MemTestOnWarmBoot,
        prompt   = STRING_TOKEN (STR_MEMTEST_WARMBOOT_SUPPORT_PROMPT),
        help     = STRING_TOKEN (STR_MEMTEST_WARMBOOT_SUPPORT_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      //
      // DDR Frequency Limit values must match the definitions in KabylakeSiliconPkg\SystemAgent\MemoryInit\Include\MrcInterface.h
      //
// AMI_OVERRIDE_START
//      suppressif NOT ideqval SA_SETUP.DdrRefClk == 0;
        oneof varid = SA_SETUP.DdrFreqLimit,
          prompt  = STRING_TOKEN(STR_DDR_FREQ_LIMIT_PROMPT),
          help    = STRING_TOKEN(STR_DDR_FREQ_LIMIT_PROMPT_HELP),
          option text = STRING_TOKEN(STR_AUTO_STRING),          value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        suppressif ideqval SA_SETUP.DdrRefClk == 2;
          option text = STRING_TOKEN(STR_DDR_FREQ_1067_STRING), value = 1067, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_1200_STRING), value = 1200, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 2;
          option text = STRING_TOKEN(STR_DDR_FREQ_1333_STRING), value = 1333, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_1400_STRING), value = 1400, flags = RESET_REQUIRED;
        endif
          option text = STRING_TOKEN(STR_DDR_FREQ_1600_STRING), value = 1600, flags = RESET_REQUIRED;
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_1800_STRING), value = 1800, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 2;
          option text = STRING_TOKEN(STR_DDR_FREQ_1867_STRING), value = 1867, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_2000_STRING), value = 2000, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 2;
          option text = STRING_TOKEN(STR_DDR_FREQ_2133_STRING), value = 2133, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_2200_STRING), value = 2200, flags = RESET_REQUIRED;
        endif
          option text = STRING_TOKEN(STR_DDR_FREQ_2400_STRING), value = 2400, flags = RESET_REQUIRED;
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_2600_STRING), value = 2600, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 2;
          option text = STRING_TOKEN(STR_DDR_FREQ_2667_STRING), value = 2667, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_2800_STRING), value = 2800, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 2;
          option text = STRING_TOKEN(STR_DDR_FREQ_2933_STRING), value = 2933, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_3000_STRING), value = 3000, flags = RESET_REQUIRED;
        endif
        suppressif (ideqval SA_SETUP.DdrRefClk == 0) OR (ideqval SA_SETUP.DdrRefClk == 1);
          option text = STRING_TOKEN(STR_DDR_FREQ_3100_STRING), value = 3100, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_3200_STRING), value = 3200, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_3400_STRING), value = 3400, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 2;
          option text = STRING_TOKEN(STR_DDR_FREQ_3467_STRING), value = 3467, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_3600_STRING), value = 3600, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 2;
          option text = STRING_TOKEN(STR_DDR_FREQ_3733_STRING), value = 3733, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_3800_STRING), value = 3800, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 1;
          option text = STRING_TOKEN(STR_DDR_FREQ_4000_STRING), value = 4000, flags = RESET_REQUIRED;
        endif
        suppressif ideqval SA_SETUP.DdrRefClk == 2;
          option text = STRING_TOKEN(STR_DDR_FREQ_4133_STRING), value = 4133, flags = RESET_REQUIRED;
        endif
          suppressif NOT (
                (ideqval CPU_SETUP_VOLATILE_DATA.CpuFamilyModel == CPU_FM_KBL) AND
                (ideqval CPU_SETUP_VOLATILE_DATA.CpuExtendedFamilyModel == CPU_EXT_FM_KBL_DT_HALO) AND
                (ideqval CPU_SETUP_VOLATILE_DATA.CpuStepping >= CS_KBL_N0)
               );
          suppressif ideqval SA_SETUP.DdrRefClk == 1;
            option text = STRING_TOKEN(STR_DDR_FREQ_4200_STRING), value = 4200, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 2;
            option text = STRING_TOKEN(STR_DDR_FREQ_4267_STRING), value = 4267, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 1;
            option text = STRING_TOKEN(STR_DDR_FREQ_4400_STRING), value = 4400, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 2;
            option text = STRING_TOKEN(STR_DDR_FREQ_4533_STRING), value = 4533, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 1;
            option text = STRING_TOKEN(STR_DDR_FREQ_4600_STRING), value = 4600, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 1;
            option text = STRING_TOKEN(STR_DDR_FREQ_4800_STRING), value = 4800, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 1;
            option text = STRING_TOKEN(STR_DDR_FREQ_5000_STRING), value = 5000, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 2;
            option text = STRING_TOKEN(STR_DDR_FREQ_5067_STRING), value = 5067, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 1;
            option text = STRING_TOKEN(STR_DDR_FREQ_5200_STRING), value = 5200, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 2;
            option text = STRING_TOKEN(STR_DDR_FREQ_5333_STRING), value = 5333, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 1;
            option text = STRING_TOKEN(STR_DDR_FREQ_5400_STRING), value = 5400, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 1;
            option text = STRING_TOKEN(STR_DDR_FREQ_5600_STRING), value = 5600, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 1;
            option text = STRING_TOKEN(STR_DDR_FREQ_5800_STRING), value = 5800, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 2;
            option text = STRING_TOKEN(STR_DDR_FREQ_5867_STRING), value = 5867, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 1;
            option text = STRING_TOKEN(STR_DDR_FREQ_6000_STRING), value = 6000, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 2;
            option text = STRING_TOKEN(STR_DDR_FREQ_6133_STRING), value = 6133, flags = RESET_REQUIRED;
          endif
          suppressif ideqval SA_SETUP.DdrRefClk == 1;
            option text = STRING_TOKEN(STR_DDR_FREQ_6200_STRING), value = 6200, flags = RESET_REQUIRED;
          endif
          endif;
        endoneof;
//      endif;
// AMI_OVERRIDE_END

#if 0  // AMI_OVERRIDE_START
      suppressif NOT ideqval SA_SETUP.DdrRefClk == 1;
        oneof varid = SA_SETUP.DdrFreqLimit,
          prompt  = STRING_TOKEN(STR_DDR_FREQ_LIMIT_PROMPT),
          help    = STRING_TOKEN(STR_DDR_FREQ_LIMIT_PROMPT_HELP),
          default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakePantherMtn BoardIdKabylakeGrizzlyMtn BoardIdKabylakeCoyoteMtn
                                                                       ? 0:1600), defaultstore = MyStandardDefault,
          option text = STRING_TOKEN(STR_AUTO_STRING),          value = 0,    flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_1067_STRING), value = 1067, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_1333_STRING), value = 1333, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_1600_STRING), value = 1600, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_1867_STRING), value = 1867, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_2133_STRING), value = 2133, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_2400_STRING), value = 2400, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_2667_STRING), value = 2667, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_2933_STRING), value = 2933, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_3200_STRING), value = 3200, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_3467_STRING), value = 3467, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_3733_STRING), value = 3733, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_4000_STRING), value = 4000, flags = RESET_REQUIRED;
          suppressif NOT (
                (ideqval CPU_SETUP_VOLATILE_DATA.CpuFamilyModel == CPU_FM_KBL) AND
                (ideqval CPU_SETUP_VOLATILE_DATA.CpuExtendedFamilyModel == CPU_EXT_FM_KBL_DT_HALO) AND
                (ideqval CPU_SETUP_VOLATILE_DATA.CpuStepping >= CS_KBL_N0)
               );
            option text = STRING_TOKEN(STR_DDR_FREQ_4267_STRING), value = 4267, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_4533_STRING), value = 4533, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_4800_STRING), value = 4800, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_5067_STRING), value = 5067, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_5333_STRING), value = 5333, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_5600_STRING), value = 5600, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_5867_STRING), value = 5867, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_6133_STRING), value = 6133, flags = RESET_REQUIRED;
          endif;
        endoneof;
      endif;

      suppressif NOT ideqval SA_SETUP.DdrRefClk == 2;
        oneof varid = SA_SETUP.DdrFreqLimit,
          prompt  = STRING_TOKEN(STR_DDR_FREQ_LIMIT_PROMPT),
          help    = STRING_TOKEN(STR_DDR_FREQ_LIMIT_PROMPT_HELP),
          option text = STRING_TOKEN(STR_AUTO_STRING),          value = 0,    flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_1200_STRING), value = 1200, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_1400_STRING), value = 1400, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_1600_STRING), value = 1600, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_1800_STRING), value = 1800, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_2000_STRING), value = 2000, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_2200_STRING), value = 2200, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_2400_STRING), value = 2400, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_2600_STRING), value = 2600, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_2800_STRING), value = 2800, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_3000_STRING), value = 3000, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DDR_FREQ_3100_STRING), value = 3100, flags = RESET_REQUIRED;
          suppressif NOT (
                (ideqval CPU_SETUP_VOLATILE_DATA.CpuFamilyModel == CPU_FM_KBL) AND
                (ideqval CPU_SETUP_VOLATILE_DATA.CpuExtendedFamilyModel == CPU_EXT_FM_KBL_DT_HALO) AND
                (ideqval CPU_SETUP_VOLATILE_DATA.CpuStepping >= CS_KBL_N0)
               );
            option text = STRING_TOKEN(STR_DDR_FREQ_3200_STRING), value = 3200, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_3400_STRING), value = 3400, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_3600_STRING), value = 3600, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_3800_STRING), value = 3800, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_4000_STRING), value = 4000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_4200_STRING), value = 4200, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_4400_STRING), value = 4400, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_4600_STRING), value = 4600, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_4800_STRING), value = 4800, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_5000_STRING), value = 5000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_5200_STRING), value = 5200, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_5400_STRING), value = 5400, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_5600_STRING), value = 5600, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_5800_STRING), value = 5800, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_6000_STRING), value = 6000, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DDR_FREQ_6200_STRING), value = 6200, flags = RESET_REQUIRED;
          endif;
        endoneof;
      endif;
#endif  // AMI_OVERRIDE_END      

      oneof varid    = SA_SETUP.HobBufferSize,
        prompt   = STRING_TOKEN(STR_HOB_BUFFER_SIZE_PROMPT),
        help     = STRING_TOKEN(STR_HOB_BUFFER_SIZE_HELP),
        option text = STRING_TOKEN(STR_AUTO_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_1B),          value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_1KB),         value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX),         value = 3, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorDesktop AND
                 NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorEmbedded AND
                 NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer AND
                 NOT ideqval SETUP_VOLATILE_DATA.PlatId         == BoardIdSkylakeHaloDdr4Rvp11 AND
                 NOT ideqval SETUP_VOLATILE_DATA.PlatId         == BoardIdKabylakeDdr4Rvp17 AND // KblGContent
                 NOT ideqval SETUP_VOLATILE_DATA.PlatId         == BoardIdSkylakeSdlBrk AND
                 NOT ideqval SETUP_VOLATILE_DATA.PlatId         == BoardIdSkylakeHaloDdr4Rvp11Ppv AND
                 NOT ideqval SETUP_VOLATILE_DATA.PlatId         == BoardIdSkylakeHaloLpddr3Rvp16 AND
                 NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorWorkstation;
        oneof varid  = SA_SETUP.EccSupport,
          prompt   = STRING_TOKEN (STR_ECC_SUPPORT_PROMPT),
          help     = STRING_TOKEN (STR_ECC_SUPPORT_HELP),
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;
#if defined(DEFAULT_TBT_ENABLE) && (DEFAULT_TBT_ENABLE == 1)
#if defined(TBT_HOST_ROUTER) && (TBT_HOST_ROUTER == 1)

      //
      // Max TOLUD setup option
      //
      oneof varid    = SA_SETUP.MaxTolud,
        prompt   = STRING_TOKEN(STR_MAX_TOLUD_PROMPT),
        help     = STRING_TOKEN(STR_MAX_TOLUD_HELP),
// AMI_OVERRIDE_START                        
//#ifdef MINTREE_FLAG
//        option text = STRING_TOKEN(STR_MAX_TOLUD_DYNAMIC_STRING), value = MAX_TOLUD_DYNAMIC, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//#else
//        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeSds BoardIdKabylakeRDdr4 BoardIdKabylakeRLpddr3
//                             ? MAX_TOLUD_DYNAMIC:MAX_TOLUD_1G), defaultstore = MyStandardDefault,
        default     = TBT_DEFAULT_TOLUD_ONE_PORT,
        option text = STRING_TOKEN(STR_MAX_TOLUD_DYNAMIC_STRING), value = MAX_TOLUD_DYNAMIC, flags = MANUFACTURING | RESET_REQUIRED;
//#endif
// AMI_OVERRIDE_END	
        option text = STRING_TOKEN(STR_MAX_TOLUD_1G_STRING),      value = MAX_TOLUD_1G,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_25G_STRING),   value = MAX_TOLUD_1_25G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_5G_STRING),    value = MAX_TOLUD_1_5G,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_75G_STRING),   value = MAX_TOLUD_1_75G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2G_STRING),      value = MAX_TOLUD_2G,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_25G_STRING),   value = MAX_TOLUD_2_25G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_5G_STRING),    value = MAX_TOLUD_2_5G,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_75G_STRING),   value = MAX_TOLUD_2_75G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_3G_STRING),      value = MAX_TOLUD_3G,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_3_25G_STRING),   value = MAX_TOLUD_3_25G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_3_5G_STRING),    value = MAX_TOLUD_3_5G,    flags = RESET_REQUIRED;
      endoneof;

#else      
      //
      // Max TOLUD setup option
      //
      oneof varid    = SA_SETUP.MaxTolud,
        prompt   = STRING_TOKEN(STR_MAX_TOLUD_PROMPT),
        help     = STRING_TOKEN(STR_MAX_TOLUD_HELP),
// AMI_OVERRIDE_START                        
//        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeSds
//                             ? MAX_TOLUD_DYNAMIC:MAX_TOLUD_1G), defaultstore = MyStandardDefault,
        default     = TBT_DEFAULT_TOLUD_TWO_PORT,
        option text = STRING_TOKEN(STR_MAX_TOLUD_DYNAMIC_STRING), value = MAX_TOLUD_DYNAMIC, flags = MANUFACTURING | RESET_REQUIRED;
// AMI_OVERRIDE_END	
        option text = STRING_TOKEN(STR_MAX_TOLUD_1G_STRING),      value = MAX_TOLUD_1G,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_25G_STRING),   value = MAX_TOLUD_1_25G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_5G_STRING),    value = MAX_TOLUD_1_5G,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_75G_STRING),   value = MAX_TOLUD_1_75G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2G_STRING),      value = MAX_TOLUD_2G,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_25G_STRING),   value = MAX_TOLUD_2_25G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_5G_STRING),    value = MAX_TOLUD_2_5G,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_75G_STRING),   value = MAX_TOLUD_2_75G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_3G_STRING),      value = MAX_TOLUD_3G,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_3_25G_STRING),   value = MAX_TOLUD_3_25G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_3_5G_STRING),    value = MAX_TOLUD_3_5G,    flags = RESET_REQUIRED;
      endoneof;         
#endif
#else
      //
      // Max TOLUD setup option
      //
      oneof varid    = SA_SETUP.MaxTolud,
        prompt   = STRING_TOKEN(STR_MAX_TOLUD_PROMPT),
        help     = STRING_TOKEN(STR_MAX_TOLUD_HELP),
// AMI_OVERRIDE_START                        
//        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeSds
//                             ? MAX_TOLUD_DYNAMIC:MAX_TOLUD_1G), defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(STR_MAX_TOLUD_DYNAMIC_STRING), value = MAX_TOLUD_DYNAMIC, flags = RESET_REQUIRED;
// AMI_OVERRIDE_END	
        option text = STRING_TOKEN(STR_MAX_TOLUD_1G_STRING),      value = MAX_TOLUD_1G,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_25G_STRING),   value = MAX_TOLUD_1_25G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_5G_STRING),    value = MAX_TOLUD_1_5G,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_1_75G_STRING),   value = MAX_TOLUD_1_75G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2G_STRING),      value = MAX_TOLUD_2G,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_25G_STRING),   value = MAX_TOLUD_2_25G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_5G_STRING),    value = MAX_TOLUD_2_5G,    flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_2_75G_STRING),   value = MAX_TOLUD_2_75G,   flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_3G_STRING),      value = MAX_TOLUD_3G,      flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_3_25G_STRING),   value = MAX_TOLUD_3_25G,   flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MAX_TOLUD_3_5G_STRING),    value = MAX_TOLUD_3_5G,    flags = RESET_REQUIRED;
      endoneof;
//ray_override / [XI-Tuning] Too much Memory Used by PCIe Devices under Windows 7 / Modified >>
// MAX_TOLUD_DYNAMIC -> MAX_TOLUD_3_25G
//ray_override / [XI-Tuning] Too much Memory Used by PCIe Devices under Windows 7 / Modified <<
#endif
// AMI_OVERRIDE_START >>>
#ifdef SIMICS_FLAG
      oneof varid  = SA_SETUP.SaGv,
        prompt   = STRING_TOKEN (STR_SA_GV_PROMPT),
        help     = STRING_TOKEN (STR_SA_GV_HELP),
        //
        // Current Simics will fail in MRC training when SAGV enabled so need to by default disable SAGV.
        //
        option text = STRING_TOKEN (STR_DISABLED_STRING),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_FIXED_LOW_STRING),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_FIXED_HIGH_STRING), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING),    value = 3, flags = RESET_REQUIRED;
      endoneof;
#else
// AMI_OVERRIDE_SA0022_START >>> for Intel MMA support
#if defined INTEL_MMA_SUPPORT && INTEL_MMA_SUPPORT == 1
    oneof varid  = SA_SETUP.SaGv,
      prompt   = STRING_TOKEN (STR_SA_GV_PROMPT),
      help     = STRING_TOKEN (STR_SA_GV_HELP),
      option text = STRING_TOKEN (STR_DISABLED_STRING),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (STR_FIXED_LOW_STRING),  value = 1, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_FIXED_HIGH_STRING), value = 2, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_ENABLED_STRING),    value = 3, flags = RESET_REQUIRED;
    endoneof;
#else // #if defined INTEL_MMA_SUPPORT && INTEL_MMA_SUPPORT == 1
      oneof varid  = SA_SETUP.SaGv,
        prompt   = STRING_TOKEN (STR_SA_GV_PROMPT),
        help     = STRING_TOKEN (STR_SA_GV_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING),   value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_FIXED_LOW_STRING),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_FIXED_HIGH_STRING), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING),    value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
#endif // #if defined INTEL_MMA_SUPPORT && INTEL_MMA_SUPPORT == 1
// AMI_OVERRIDE_SA0022_END <<<
#endif      
// AMI_OVERRIDE_END <<<

      suppressif NOT ideqval SA_SETUP.SaGv == 1 AND
                 NOT ideqval SA_SETUP.SaGv == 3;
        oneof varid  = SA_SETUP.FreqSaGvLow,
          prompt   = STRING_TOKEN (STR_SA_GV_LOW_PROMPT),
          help     = STRING_TOKEN (STR_SA_GV_LOW_HELP),
          option text = STRING_TOKEN (STR_MRC_DEFAULT),                value =    0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DDR_FREQ_1067_STRING),       value = 1067, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DDR_FREQ_1200_STRING),       value = 1200, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DDR_FREQ_1333_STRING),       value = 1333, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DDR_FREQ_1400_STRING),       value = 1400, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DDR_FREQ_1600_STRING),       value = 1600, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DDR_FREQ_1800_STRING),       value = 1800, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DDR_FREQ_1867_STRING),       value = 1867, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SA_SETUP.RetrainOnFastFail,
        prompt      = STRING_TOKEN(STR_RETRAIN_ON_FAST_FAIL_PROMPT),
        help        = STRING_TOKEN(STR_RETRAIN_ON_FAST_FAIL_HELP),
        option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.CmdTriStateDis,
        prompt   = STRING_TOKEN (STR_CMD_3ST_SUPPORT_PROMPT),
        help     = STRING_TOKEN (STR_CMD_3ST_SUPPORT_HELP),
        option text = STRING_TOKEN (STR_ENABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.EnBER,
        prompt   = STRING_TOKEN (BER_SUPPORT_PROMPT),
        help     = STRING_TOKEN (BER_SUPPORT_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;



      oneof varid    = SA_SETUP.RhPrevention,
        prompt   = STRING_TOKEN(STR_RH_PREVENTION_PROMPT),
        help     = STRING_TOKEN(STR_RH_PREVENTION_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.RhPrevention == 0;
        oneof varid    = SA_SETUP.RhSolution,
          prompt   = STRING_TOKEN(STR_RH_SOLUTION_PROMPT),
          help     = STRING_TOKEN(STR_RH_SOLUTION_HELP),
          option text = STRING_TOKEN (STR_HARDWARE_RHP), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_2X_REFRESH), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ((ideqval SA_SETUP.RhPrevention == 0) OR (ideqval SA_SETUP.RhSolution == 1));
        oneof varid    = SA_SETUP.RhActProbability,
          prompt   = STRING_TOKEN(STR_RH_ACT_PROBABILITY_PROMPT),
          help     = STRING_TOKEN(STR_RH_ACT_PROBABILITY_HELP),
          option text = STRING_TOKEN (STR_1_IN_2_TO_1),  value = 1,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_2),  value = 2,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_3),  value = 3,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_4),  value = 4,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_5),  value = 5,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_6),  value = 6,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_7),  value = 7,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_8),  value = 8,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_9),  value = 9,  flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_10), value = 10, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_11), value = 11, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_12), value = 12, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_13), value = 13, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_14), value = 14, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_1_IN_2_TO_15), value = 15, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid    = SA_SETUP.ExitOnFailure,
        prompt   = STRING_TOKEN(STR_EXIT_ON_FAIL_PROMPT),
        help     = STRING_TOKEN(STR_EXIT_ON_FAIL_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.McLock,
        prompt   = STRING_TOKEN (STR_MCLOCK_SUPPORT_PROMPT),
        help     = STRING_TOKEN (STR_MCLOCK_SUPPORT_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
      oneof varid  = SA_SETUP.ProbelessTrace,
        prompt   = STRING_TOKEN (STR_PROBELESS_TRACE_PROMPT),
        help     = STRING_TOKEN (STR_PROBELESS_TRACE_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_IOT_MOT_STRING),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_HD_PORT_STRING),  value = 2, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SA_SETUP.ProbelessTrace == 1;
        numeric varid  = SA_SETUP.GdxcIotSize,
          prompt  = STRING_TOKEN (STR_GDXC_IOT_SIZE_SUPPORT_PROMPT),
          help    = STRING_TOKEN (STR_GDXC_IOT_MOT_SIZE_SUPPORT_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,   // Minimum is 0MB
          maximum = 128, // Maximum is 1GB (8MB units)
          step    = 1,
          default = 4,
        endnumeric;

        numeric varid  = SA_SETUP.GdxcMotSize,
          prompt  = STRING_TOKEN (STR_GDXC_MOT_SIZE_SUPPORT_PROMPT),
          help    = STRING_TOKEN (STR_GDXC_IOT_MOT_SIZE_SUPPORT_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,   // Minimum is 0MB
          maximum = 128, // Maximum is 1GB (8 MB units)
          step    = 1,
          default = 12,
        endnumeric;

        oneof varid  = SA_SETUP.MemoryTrace,
          prompt   = STRING_TOKEN (STR_MEMORY_TRACE_PROMPT),
          help     = STRING_TOKEN (STR_MEMORY_TRACE_HELP),
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;
      grayoutif NOT ideqval SA_SETUP.ProbelessTrace == 0;
        oneof varid   =  SA_SETUP.IedMemEnable,
          prompt   = STRING_TOKEN(STR_IED_MEMORY_ENABLE_PROMPT),
          help     = STRING_TOKEN(STR_IED_MEMORY_ENABLE_HELP),
          option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;
        oneof varid  = SA_SETUP.ChHashEnable,
          prompt   = STRING_TOKEN (STR_CH_HASH_SUPPORT_PROMPT),
          help     = STRING_TOKEN (STR_CH_HASH_SUPPORT_HELP),
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        numeric varid  = SA_SETUP.ChHashMask,
          prompt   = STRING_TOKEN (STR_CH_HASH_MASK_SUPPORT_PROMPT),
          help     = STRING_TOKEN (STR_CH_HASH_MASK_SUPPORT_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0x0000,  // Minimum is BIT6, AUTO is 0
          maximum = 0x3FFF,  // Maximum is BITS 19-6
          step    = 1,
          default = 0,
        endnumeric;

      oneof varid  = SA_SETUP.ChHashInterleaveBit,
        prompt   = STRING_TOKEN (STR_CH_HASH_INTLVED_BIT_SUPPORT_PROMPT),
        help     = STRING_TOKEN (STR_CH_HASH_INTLVED_BIT_SUPPORT_HELP),
        option text = STRING_TOKEN (STR_BIT6_STRING),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_BIT7_STRING),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_BIT8_STRING),  value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_BIT9_STRING),  value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_BIT10_STRING), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_BIT11_STRING), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_BIT12_STRING), value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_BIT13_STRING), value = 7, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.Vc1ReadMeter,
        prompt   = STRING_TOKEN (STR_VC1_READ_METER_ENABLE_PROMPT),
        help     = STRING_TOKEN (STR_VC1_READ_METER_ENABLE_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.Vc1ReadMeter == 0;
        numeric varid  = SA_SETUP.Vc1ReadMeterTimeWindow,
          prompt   = STRING_TOKEN (STR_VC1_READ_METER_TIME_WINDOW_PROMPT),
          help     = STRING_TOKEN (STR_VC1_READ_METER_TIME_WINDOW_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0x00000,
          maximum = 0x1FFFF,
          step    = 1,
          default = 0x320,
        endnumeric;

        numeric varid  = SA_SETUP.Vc1ReadMeterThreshold,
          prompt   = STRING_TOKEN (STR_VC1_READ_METER_THRESHOLD_PROMPT),
          help     = STRING_TOKEN (STR_VC1_READ_METER_THRESHOLD_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0x0000,
          maximum = 0xFFFF,
          step    = 1,
          default = 0x118,
        endnumeric;
      endif;

      numeric varid  = SA_SETUP.StrongWkLeaker,
        prompt   = STRING_TOKEN (STR_STRONG_WK_LEAKER_PROMPT),
        help     = STRING_TOKEN (STR_STRONG_WK_LEAKER_HELP),
        flags   = RESET_REQUIRED,
        minimum = 1,
        maximum = 7,
        step    = 1,
        default = 7,
      endnumeric;


      oneof varid  = SA_SETUP.ScramblerSupport,
        prompt   = STRING_TOKEN (STR_MEMORY_SCRAMBLER_PROMPT),
        help     = STRING_TOKEN (STR_MEMORY_SCRAMBLER_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;


      oneof varid  = SA_SETUP.ForceColdReset,
        prompt   = STRING_TOKEN (STR_FORCE_COLDRESET_PROMPT),
        help     = STRING_TOKEN (STR_FORCE_COLDRESET_HELP),
        option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.DisableDimmChannel0,
        prompt   = STRING_TOKEN (STR_DISABLE_CHANNEL10_DIMM_PROMPT),
        help     = STRING_TOKEN (STR_DISABLE_CHANNEL10_DIMM_HELP),
        option text = STRING_TOKEN(STR_ENABLE_BOTH_DIMM_STRING),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLE_DIMM0_STRING),         value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLE_DIMM1_STRING),         value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLE_BOTH_DIMM_STRING),     value = 3, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.DisableDimmChannel1,
        prompt   = STRING_TOKEN (STR_DISABLE_CHANNEL11_DIMM_PROMPT),
        help     = STRING_TOKEN (STR_DISABLE_CHANNEL11_DIMM_HELP),
        option text = STRING_TOKEN(STR_ENABLE_BOTH_DIMM_STRING),      value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLE_DIMM0_STRING),         value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLE_DIMM1_STRING),         value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLE_BOTH_DIMM_STRING),     value = 3, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.ForceSingleRank,
        prompt   = STRING_TOKEN (STR_FORCE_SINGLE_RANK_PROMPT),
        help     = STRING_TOKEN (STR_FORCE_SINGLE_RANK_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.RemapEnable,
        prompt   = STRING_TOKEN (STR_REMAP_ENABLE_PROMPT),
        help     = STRING_TOKEN (STR_REMAP_ENABLE_PROMPT_HELP),
        option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
      endoneof;

      oneof varid  = SA_SETUP.MrcTimeMeasure,
        prompt   = STRING_TOKEN (STR_TIME_MEASURE_PROMPT),
        help     = STRING_TOKEN (STR_TIME_MEASURE_PROMPT_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
      endoneof;
      
// AMI_OVERRIDE_START >>>
      oneof varid  = SETUP_DATA.WeaklockEn,
        prompt      = STRING_TOKEN(STR_WEAKLOCK_SUPPORT_PROMPT),
        help        = STRING_TOKEN(STR_WEAKLOCK_SUPPORT_HELP),
        option text = STRING_TOKEN(STR_DISABLED_STRING),  value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;            
      
      numeric varid  = SETUP_DATA.PwdwnIdleCounter,
        prompt   = STRING_TOKEN(STR_POWER_DOWN_IDLE_COUNTER_PROMPT),
        help     = STRING_TOKEN(STR_POWER_DOWN_IDLE_COUNTER_HELP),
        flags   = RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 0,
        default = 0, defaultstore = AmiMfgDefault,
      endnumeric;      
// AMI_OVERRIDE_END <<<

    suppressif NOT (
                    (ideqval CPU_SETUP_VOLATILE_DATA.CpuFamilyModel == CPU_FM_SKL) AND
                    (
                     (
                      (ideqval CPU_SETUP_VOLATILE_DATA.CpuExtendedFamilyModel == CPU_EXT_FM_SKL_ULT_ULX) AND
                      (
                       (ideqval CPU_SETUP_VOLATILE_DATA.CpuStepping == CS_SKL_A0) OR
                       (ideqval CPU_SETUP_VOLATILE_DATA.CpuStepping == CS_SKL_B0)
                      )
                     ) OR
                     (
                      (ideqval CPU_SETUP_VOLATILE_DATA.CpuExtendedFamilyModel == CPU_EXT_FM_SKL_DT_HALO) AND
                      (ideqval CPU_SETUP_VOLATILE_DATA.CpuStepping == CS_SKL_P0)
                     )
                    )
                   );
    endif;

    suppressif (
                (ideqval CPU_SETUP_VOLATILE_DATA.CpuFamilyModel == CPU_FM_SKL) AND
                (
                  (
                  (ideqval CPU_SETUP_VOLATILE_DATA.CpuExtendedFamilyModel == CPU_EXT_FM_SKL_ULT_ULX) AND
                  (
                    (ideqval CPU_SETUP_VOLATILE_DATA.CpuStepping == CS_SKL_A0) OR
                    (ideqval CPU_SETUP_VOLATILE_DATA.CpuStepping == CS_SKL_B0)
                  )
                  ) OR
                  (
                  (ideqval CPU_SETUP_VOLATILE_DATA.CpuExtendedFamilyModel == CPU_EXT_FM_SKL_DT_HALO) AND
                  (ideqval CPU_SETUP_VOLATILE_DATA.CpuStepping == CS_SKL_P0)
                  )
                )
               );
// AMI_OVERRIDE_SA0022_START >>> for Intel MMA support
#if (defined INTEL_MMA_SUPPORT && INTEL_MMA_SUPPORT == 1) || (defined MRC_DEBUG_PRINT_SUPPORT && MRC_DEBUG_PRINT_SUPPORT == 1)
      oneof varid  = SA_SETUP.MrcFastBoot,
        prompt   = STRING_TOKEN (STR_MRC_FAST_BOOT_ENABLE_PROMPT),
        help     = STRING_TOKEN (STR_MRC_FAST_BOOT_ENABLE_PROMPT_HELP),
// AMI_OVERRIDE_START      
//        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeA0Rvp3Ppv BoardIdSkylakeULpddr3Rvp5Ppv BoardIdSkylakeURvp7Ppv BoardIdSkylakeAioRvp10CrbPpv BoardIdSkylakeHaloDdr4Rvp11Ppv
//                                                                     ? 0x1:0x0), defaultstore = MyStandardDefault,
// AMI_OVERRIDE_END
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
    endoneof;
#else // #if (defined INTEL_MMA_SUPPORT && INTEL_MMA_SUPPORT == 1) || (defined MRC_DEBUG_PRINT_SUPPORT && MRC_DEBUG_PRINT_SUPPORT == 1)
      oneof varid  = SA_SETUP.MrcFastBoot,
        prompt   = STRING_TOKEN (STR_MRC_FAST_BOOT_ENABLE_PROMPT),
        help     = STRING_TOKEN (STR_MRC_FAST_BOOT_ENABLE_PROMPT_HELP),
// AMI_OVERRIDE_START           
//        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeA0Rvp3Ppv BoardIdSkylakeULpddr3Rvp5Ppv BoardIdSkylakeURvp7Ppv BoardIdSkylakeAioRvp10CrbPpv BoardIdSkylakeHaloDdr4Rvp11Ppv
//                                                                     ? 0x1:0x0), defaultstore = MyStandardDefault,
// AMI_OVERRIDE_END                                                                     
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
// AMI_OVERRIDE_START	
        option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
// AMI_OVERRIDE_END	
      endoneof;
#endif // #if (defined INTEL_MMA_SUPPORT && INTEL_MMA_SUPPORT == 1) || (defined MRC_DEBUG_PRINT_SUPPORT && MRC_DEBUG_PRINT_SUPPORT == 1)
// AMI_OVERRIDE_SA0022_END <<<
    endif;

    oneof varid  = SA_SETUP.LpddrMemWriteLatencySet,
      prompt   = STRING_TOKEN (STR_LPDDR_MEM_WL_SET_PROMPT),
      help     = STRING_TOKEN (STR_LPDDR_MEM_WL_SET_HELP),
      option text = STRING_TOKEN (STR_SET_A), value = 0, flags = RESET_REQUIRED;
      option text = STRING_TOKEN (STR_SET_B), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
    endoneof;

// AMI_OVERRIDE_SA0022_START >>> for Intel MMA support
#if (defined INTEL_MMA_SUPPORT && INTEL_MMA_SUPPORT == 1) || (defined MRC_DEBUG_PRINT_SUPPORT && MRC_DEBUG_PRINT_SUPPORT == 1)
    oneof varid   = SA_SETUP.BdatEnable,
      prompt      = STRING_TOKEN(STR_BDAT_EN_PROMPT),
      help        = STRING_TOKEN(STR_BDAT_EN_HELP),
      default     = BDAT_ENABLE,
      option text = STRING_TOKEN(STR_ACPI_DISABLED), value = 0, flags = MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ACPI_ENABLED), value = 1, flags = RESET_REQUIRED;
    endoneof;
#else // #if (defined INTEL_MMA_SUPPORT && INTEL_MMA_SUPPORT == 1) || (defined MRC_DEBUG_PRINT_SUPPORT && MRC_DEBUG_PRINT_SUPPORT == 1)
    oneof varid   = SA_SETUP.BdatEnable,
      prompt      = STRING_TOKEN(STR_BDAT_EN_PROMPT),
      help        = STRING_TOKEN(STR_BDAT_EN_HELP),
      option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN(STR_ENABLED_STRING), value = 1, flags = RESET_REQUIRED;
    endoneof;
#endif // #if (defined INTEL_MMA_SUPPORT && INTEL_MMA_SUPPORT == 1) || (defined MRC_DEBUG_PRINT_SUPPORT && MRC_DEBUG_PRINT_SUPPORT == 1)
// AMI_OVERRIDE_SA0022_END <<<

    grayoutif ideqval SA_SETUP.BdatEnable == 0x0;
      oneof varid   = SA_SETUP.BdatSchema,
        prompt      = STRING_TOKEN(STR_BDAT_SCHEMA_PROMPT),
        help        = STRING_TOKEN(STR_BDAT_SCHEMA_HELP),
        option text = STRING_TOKEN(STR_BDAT_SCHEMA_2), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_BDAT_SCHEMA_6B), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
    
      oneof varid   = SA_SETUP.BdatTestType,
        prompt      = STRING_TOKEN(STR_BDAT_TEST_TYPE_PROMPT),
        help        = STRING_TOKEN(STR_BDAT_TEST_TYPE_HELP),
        option text = STRING_TOKEN(STR_BDAT_TEST_TYPE_RMT_RANK), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        suppressif ideqval SA_SETUP.BdatSchema == 0x0;
          option text = STRING_TOKEN(STR_BDAT_TEST_TYPE_RMT_BIT), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_BDAT_TEST_TYPE_MARGIN_2D), value = 2, flags = RESET_REQUIRED;
        endif
      endoneof;
    endif;
    
    suppressif ideqval SA_SETUP.BdatTestType == 2;
      numeric varid = SA_SETUP.RMTLoopCount,
        prompt      = STRING_TOKEN(STR_RMT_LOOPCOUNT_PROMPT),
        help        = STRING_TOKEN(STR_RMT_LOOPCOUNT_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 32,
        step        = 1,
        default     = 0, // Auto
      endnumeric;
    endif;

// AMI_OVERRIDE_SA0022_START >>> for Intel MMA support
#if defined INTEL_MMA_SUPPORT && INTEL_MMA_SUPPORT == 1
  oneof varid  = SA_SETUP.EvLoader,
    prompt   = STRING_TOKEN (STR_EV_LOADER_ENABLE_PROMPT),
    help     = STRING_TOKEN (STR_EV_LOADER_ENABLE_HELP),
    default     = EV_LOADER_ENABLE,
    option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
    option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = MANUFACTURING | RESET_REQUIRED;
  endoneof;
#else // #if defined INTEL_MMA_SUPPORT && INTEL_MMA_SUPPORT == 1
    oneof varid  = SA_SETUP.EvLoader,
      prompt   = STRING_TOKEN (STR_EV_LOADER_ENABLE_PROMPT),
      help     = STRING_TOKEN (STR_EV_LOADER_ENABLE_HELP),
      option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
    endoneof;
#endif // #if defined INTEL_MMA_SUPPORT && INTEL_MMA_SUPPORT == 1
// AMI_OVERRIDE_SA0022_END <<<

    oneof varid  = SA_SETUP.EvLoaderDelay,
      prompt   = STRING_TOKEN (STR_EV_LOADER_DELAY_ENABLE_PROMPT),
      help     = STRING_TOKEN (STR_EV_LOADER_DELAY_ENABLE_HELP),
      option text = STRING_TOKEN (STR_ENABLED_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
    endoneof;


endif ;
//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Hided <<
    endform;

    form formid = AUTO_ID(NB_FORM_ID),
    title = STRING_TOKEN(STR_NB_FORM_TITLE);

      SUBTITLE(STRING_TOKEN(STR_NB_FORM_SUBTITLE))
      SEPARATOR

//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Showed >>
      goto MEMORY_FORM_ID, 
        prompt = STRING_TOKEN(STR_MEMORY_FORM),
        help = STRING_TOKEN(STR_MEMORY_FORM_HELP);

      goto IGFX_FORM_ID,
        prompt  = STRING_TOKEN(STR_IGFX),
        help    = STRING_TOKEN(STR_IGFX_HELP);

      SEPARATOR

      suppressif  ideqval SETUP_VOLATILE_DATA.VTdAvailable == 0;
        grayoutif ideqval SETUP_VOLATILE_DATA.TbtVtdBaseSecurityGrayOut == 1;
          oneof varid    = SA_SETUP.EnableVtd,
            prompt      = STRING_TOKEN(STR_SA_VTD_PROMPT),
            help        = STRING_TOKEN(STR_SA_VTD_HELP),
//            default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeA0Rvp3Ppv BoardIdSkylakeULpddr3Rvp5Ppv BoardIdSkylakeURvp7Ppv BoardIdSkylakeAioRvp10CrbPpv BoardIdSkylakeHaloDdr4Rvp11Ppv
//                                                                         ? 0x1:0x0), defaultstore = MyStandardDefault,
            option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
        endif; //TbtVtdBaseSecurityGrayOut
      endif;
//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Showed <<

//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Hided >>
suppressif TRUE ;

      text
        help   = STRING_TOKEN(STR_SA_PCIE_CODE_VERSION_HELP),
        text   = STRING_TOKEN(STR_SA_PCIE_CODE_VERSION_NAME),
        text   = STRING_TOKEN(STR_SA_PCIE_CODE_VERSION_VALUE),
        flags  = 0,
        key    = 0;

      text
        help   = STRING_TOKEN(STR_SA_VTD_HELP),
        text   = STRING_TOKEN(STR_SA_VTD_STRING),
        text   = STRING_TOKEN(STR_SA_VTD_VALUE),
        flags  = 0,
        key    = 0;

      SEPARATOR

// AMI_OVERRIDE_START >>>
      goto MEMORY_FORM_ID, 
        prompt = STRING_TOKEN(STR_MEMORY_FORM),
        help = STRING_TOKEN(STR_MEMORY_FORM_HELP);
// AMI_OVERRIDE_END <<<

      goto IGFX_FORM_ID,
        prompt  = STRING_TOKEN(STR_IGFX),
        help    = STRING_TOKEN(STR_IGFX_HELP);

      goto COMMON_NB_OPTIONS_FORM_ID,
        prompt = STRING_TOKEN(STR_NB_OPTIONS_FORM),
        help = STRING_TOKEN(STR_NB_OPTIONS_FORM_HELP);

      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == TypeTrad;
        goto PEG_FORM_ID,
          prompt  = STRING_TOKEN(STR_PEG_ROOTPORT_PROMPT),
          help    = STRING_TOKEN(STR_PEG_ROOTPORT_HELP);
      endif;

      SEPARATOR

      oneof varid     = SA_SETUP.AutoNsg,
        prompt      = STRING_TOKEN(STR_AUTO_NSG_PROMPT),
        help        = STRING_TOKEN(STR_AUTO_NSG_HELP),
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_MANUAL_STRING),   value = 0, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.AutoNsg == 1;
        numeric varid   = SA_SETUP.NumStopGrant,
          prompt  = STRING_TOKEN (STR_NUM_STOP_GRANT_PROMPT),
          help    = STRING_TOKEN (STR_NUM_STOP_GRANT_HELP),
          flags   = RESET_REQUIRED,
          minimum = 1,
          maximum = 0x3f,
          step    = 0,
          default = 1,
        endnumeric;
      endif;

      suppressif  ideqval SETUP_VOLATILE_DATA.VTdAvailable == 0;
        grayoutif ideqval SETUP_VOLATILE_DATA.TbtVtdBaseSecurityGrayOut == 1;
          oneof varid    = SA_SETUP.EnableVtd,
            prompt      = STRING_TOKEN(STR_SA_VTD_PROMPT),
            help        = STRING_TOKEN(STR_SA_VTD_HELP),
//            default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeA0Rvp3Ppv BoardIdSkylakeULpddr3Rvp5Ppv BoardIdSkylakeURvp7Ppv BoardIdSkylakeAioRvp10CrbPpv BoardIdSkylakeHaloDdr4Rvp11Ppv
//                                                                         ? 0x1:0x0), defaultstore = MyStandardDefault,
            option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
        endif; //TbtVtdBaseSecurityGrayOut
      endif;


      oneof varid    = SA_SETUP.SaDevice7,
        prompt   = STRING_TOKEN(STR_SA_CHAP_DEVICE_PROMPT),
        help     = STRING_TOKEN(STR_SA_CHAP_DEVICE_HELP),
        option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid    = SA_SETUP.SaDevice4,
        prompt   = STRING_TOKEN(STR_SA_THERMAL_DEVICE_PROMPT),
        help     = STRING_TOKEN(STR_SA_THERMAL_DEVICE_HELP),
        option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid    = SA_SETUP.GmmEnable,
        prompt   = STRING_TOKEN(STR_SA_GMM_DEVICE_PROMPT),
        help     = STRING_TOKEN(STR_SA_GMM_DEVICE_HELP),
// AMI_OVERRIDE_START >>>
//        default value=cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdZumbaBeachServerEv BoardIdZumbaBeachServerCrb ? 0x1:0x0), defaultstore = MyStandardDefault,  // AdvancedFeaturesContent
// AMI_OVERRIDE_END <<<
        option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
      endoneof;

      oneof varid    = SA_SETUP.CridEnable,
// AMI_OVERRIDE_START >>>
        questionid = AUTO_ID(NB_CRID_KEY),
// AMI_OVERRIDE_END <<<
        prompt   = STRING_TOKEN(STR_SA_CRID_ENABLE_PROMPT),
        help     = STRING_TOKEN(STR_SA_CRID_ENABLE_HELP),
// AMI_OVERRIDE_START >>>
        flags   = INTERACTIVE,
// AMI_OVERRIDE_END <<<
        option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.ApertureSize == 15;
        oneof varid   =  SA_SETUP.EnableAbove4GBMmio,
          prompt   = STRING_TOKEN(STR_MMIO_ABOVE_4G_PROMPT),
          help     = STRING_TOKEN(STR_MMIO_ABOVE_4G_HELP),
          default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeRDdr4 BoardIdKabylakeRLpddr3
                               ? 0x0:0x1), defaultstore = MyStandardDefault,
          option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        endoneof;
      endif;

      grayoutif ideqval SETUP_VOLATILE_DATA.VTdAvailable == 0
                  OR ideqval SA_SETUP.EnableVtd == 0;
      suppressif  ideqval SETUP_CPU_FEATURES.LocalX2ApicAvailable == 0;
        oneof varid   =  SA_SETUP.X2ApicOptOut,
          prompt   = STRING_TOKEN(STR_X2APIC_OPT_OUT_PROMPT),
          help     = STRING_TOKEN(STR_X2APIC_OPT_OUT_HELP),
          option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;
      endif;

      suppressif ideqval SETUP_VOLATILE_DATA.ImguSupported == 0;
      grayoutif ideqval PCH_SETUP.PchSkyCamCio2Enable == 0;
        oneof varid   =  SA_SETUP.SaImguEnable,
          prompt   = STRING_TOKEN(STR_SA_SKYCAM_DEVICE_PROMPT),
          help     = STRING_TOKEN(STR_SA_SKYCAM_DEVICE_HELP),
          option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        endoneof;
      endif;
      endif;

      suppressif NOT (ideqval CPU_SETUP_VOLATILE_DATA.EdramTestModeEnable == 1);
        oneof varid   = SA_SETUP.EdramTestMode,
          prompt      = STRING_TOKEN(STR_EDRAMWA_PROMPT),
          help        = STRING_TOKEN(STR_EDRAMWA_HELP),
          option text = STRING_TOKEN(STR_EDRAM_DISABLED), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EDRAM_ENABLE), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EDRAM_HW_MODE), value = 2, flags = DEFAULT | RESET_REQUIRED;
        endoneof;
      endif;
// AMI_OVERRIDE_SA0023_START >>>
#if defined(NB_SETUP_SUPPORT) && (NB_SETUP_SUPPORT == 1)
#if defined(PCIE_DYNAMIC_SUPPORT) && (PCIE_DYNAMIC_SUPPORT == 1)
      NB_ONEOF_PCIEXPRESSLENGTH
#endif
#endif
// AMI_OVERRIDE_SA0023_END <<<

endif ;
//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Hided <<
    endform;


    form formid = AUTO_ID(IGFX_FORM_ID),
    title     = STRING_TOKEN(STR_IGFX_TITLE);

    SUBTITLE(STRING_TOKEN(STR_IGFX_SUBTITLE))
    SEPARATOR

//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Showed >>
      //
      // Primary Display setup option
      //
      oneof varid = SA_SETUP.PrimaryDisplay,
        prompt    = STRING_TOKEN(STR_PRIMARY_DISPLAY),
        help      = STRING_TOKEN(STR_PRIMARY_DISPLAY_HELP),
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                                                                     ? 3:4), defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(STR_AUTO_STRING),    value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_IGFX_STRING),    value = 0, flags = RESET_REQUIRED;
        suppressif ideqval SETUP_VOLATILE_DATA.PlatformType == TypeUltUlx AND
                     (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorMobile OR
                      ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorEmbedded);
          option text = STRING_TOKEN(STR_PEG_STRING),   value = 1, flags = RESET_REQUIRED;
        endif;
      endoneof;

      suppressif ideqval SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeSds;
        oneof varid    = SA_SETUP.InternalGraphics,
          prompt   = STRING_TOKEN(STR_INT_GRAPHICS_PROMPT),
          help     = STRING_TOKEN(STR_INT_GRAPHICS_HELP),
// AMI_OVERRIDE_START
          option text = STRING_TOKEN(STR_AUTO_STRING), value = 2, flags = RESET_REQUIRED;
//          default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeA0Rvp3Ppv BoardIdSkylakeULpddr3Rvp5Ppv BoardIdSkylakeURvp7Ppv BoardIdSkylakeAioRvp10CrbPpv BoardIdSkylakeHaloDdr4Rvp11Ppv
//                                                                       ? cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdZumbaBeachServerEv BoardIdZumbaBeachServerCrb
//                                                                       ? 0x2:0x0):0x1), defaultstore = MyStandardDefault,
//          option text = STRING_TOKEN(STR_AUTO_STRING), value = 2, flags = RESET_REQUIRED;
// AMI_OVERRIDE_END
          option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;
//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Changed : STR_AUTO_STRING -> STR_ENABLED_STRING

      //
      // IgdDvmt50PreAlloc for SKL CPU
      //
      suppressif ideqval SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeSds;
        oneof varid   = SA_SETUP.IgdDvmt50PreAlloc,
// AMI_OVERRIDE_START >>>
          questionid = AUTO_ID(NB_IGD_DVMT50_PREALLOC_KEY),
// AMI_OVERRIDE_END <<<
          prompt  = STRING_TOKEN(STR_DVMT50_PRE_ALLOC),
          help    = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_HELP),
// AMI_OVERRIDE_START
          flags   = INTERACTIVE,
//          default value=cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdZumbaBeachServerEv BoardIdZumbaBeachServerCrb
//                       ? 0x1:0x2), defaultstore = MyStandardDefault,
// AMI_OVERRIDE_END
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_0M), value=0, flags=RESET_REQUIRED;
// AMI_OVERRIDE_START
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_32M), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_32M), value = 1, flags = RESET_REQUIRED;
// AMI_OVERRIDE_END	  
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_64M), value=2, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_4M), value=240, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_8M), value=241, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_12M), value=242, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_16M), value=243, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_20M), value=244, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_24M), value=245, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_28M), value=246, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_32M_F7), value=247, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_36M), value=248, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_40M), value=249, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_44M), value=250, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_48M), value=251, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_52M), value=252, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_56M), value=253, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_60M), value=254, flags=RESET_REQUIRED;
        endoneof;
      endif;

        oneof   varid   = SA_SETUP.IgdDvmt50TotalAlloc,
          prompt  = STRING_TOKEN(STR_DVMT50_DVMT ),
          help    = STRING_TOKEN(STR_DVMT50_DVMT_HELP),
// AMI_OVERRIDE_START
          option text = STRING_TOKEN(STR_DVMT50_ALLOC_256), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//          default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdZumbaBeachServerEv BoardIdZumbaBeachServerCrb
//                        ? 0x2:0x3), defaultstore = MyStandardDefault,
//          option text = STRING_TOKEN(STR_DVMT50_ALLOC_256), value = 2, flags = RESET_REQUIRED;
// AMI_OVERRIDE_END
          option text = STRING_TOKEN(STR_DVMT50_ALLOC_128), value=1, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_ALLOC_MAX), value=3, flags=RESET_REQUIRED;
        endoneof;

//ray_override / [TAG-SupportDVIEdidLess] Spec. Changed : Support DVI EDID Less Feature / Added >>
        SEPARATOR

        oneof varid    = SETUP_DATA.DviEdidLessMode[0],
          prompt   = STRING_TOKEN(STR_DVI0_EDID_LESS_MODE_PROMPT),
          help     = STRING_TOKEN(STR_DVI0_EDID_LESS_MODE_PROMPT),
          option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
        endoneof;
        suppressif ideqval SETUP_DATA.DviEdidLessMode[0] == 0 ;
          oneof varid    = SETUP_DATA.DviEdidLessTypeSelection[0],
            prompt   = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_SELECTION_PROMPT),
            help     = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_SELECTION_PROMPT),
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_800_480), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_800_600),  value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1024_768),  value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1280_800),  value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1280_1024),  value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1366_768),  value = 5, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1440_900),  value = 6, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1600_900),  value = 7, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1600_1200),  value = 8, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1680_1050),  value = 9, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1920_1080),  value = 10, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1920_1200),  value = 11, flags = RESET_REQUIRED;
          endoneof;
        endif ;
        oneof varid    = SETUP_DATA.DviEdidLessMode[1],
          prompt   = STRING_TOKEN(STR_DVI1_EDID_LESS_MODE_PROMPT),
          help     = STRING_TOKEN(STR_DVI1_EDID_LESS_MODE_PROMPT),
          option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
        endoneof;
        suppressif ideqval SETUP_DATA.DviEdidLessMode[1] == 0 ;
          oneof varid    = SETUP_DATA.DviEdidLessTypeSelection[1],
            prompt   = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_SELECTION_PROMPT),
            help     = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_SELECTION_PROMPT),
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_800_480), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_800_600),  value = 1, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1024_768),  value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1280_800),  value = 3, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1280_1024),  value = 4, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1366_768),  value = 5, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1440_900),  value = 6, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1600_900),  value = 7, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1600_1200),  value = 8, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1680_1050),  value = 9, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1920_1080),  value = 10, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_DVI_EDID_LESS_TYPE_1920_1200),  value = 11, flags = RESET_REQUIRED;
          endoneof;
        endif ;
//ray_override / [TAG-SupportDVIEdidLess] Spec. Changed : Support DVI EDID Less Feature / Added <<
//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Showed <<

//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Hided >>
suppressif TRUE ;
    suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;
        //
        // Graphics Turbo IMON Current setup option
        //
        numeric varid = SA_SETUP.GfxTurboIMON,
          prompt      = STRING_TOKEN (STR_GRAPHICS_TURBO_IMAX),
          help        = STRING_TOKEN (STR_GRAPHICS_TURBO_IMAX_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 14,
          maximum     = 31,
          step        = 1,
          default     = 31,  // default ICC_MAX value
        endnumeric;
    endif;

        oneof varid    = SA_SETUP.SkipExtGfxScan,
          prompt   = STRING_TOKEN(STR_SKIP_EXT_GFX_SCAN),
          help     = STRING_TOKEN(STR_SKIP_EXT_GFX_SCAN_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
    endoneof;

      SEPARATOR

      //
      // Primary Display setup option
      //
      oneof varid = SA_SETUP.PrimaryDisplay,
        prompt    = STRING_TOKEN(STR_PRIMARY_DISPLAY),
        help      = STRING_TOKEN(STR_PRIMARY_DISPLAY_HELP),
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                                                                     ? 3:4), defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(STR_AUTO_STRING),    value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_IGFX_STRING),    value = 0, flags = RESET_REQUIRED;
        suppressif ideqval SETUP_VOLATILE_DATA.PlatformType == TypeUltUlx AND
                     (ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorMobile OR
                      ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorEmbedded);
          option text = STRING_TOKEN(STR_PEG_STRING),   value = 1, flags = RESET_REQUIRED;
        endif;
        option text = STRING_TOKEN(STR_PCH_PCI_STRING), value = 2, flags = RESET_REQUIRED;
        suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;
          option text = STRING_TOKEN(STR_SG_STRING) ,   value = 4, flags = RESET_REQUIRED;
        endif;
      endoneof;

      //
      // PCIe Card selection
      //
      suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;
        oneof varid   = SA_SETUP.PcieCardSelect,
          prompt      = STRING_TOKEN(STR_PCIE_CARD),
          help        = STRING_TOKEN(STR_PCIE_CARD_HELP),
          default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                                                                       ? 2:1), defaultstore = MyStandardDefault,
          option text = STRING_TOKEN(STR_AUTO_STRING),    value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ELK_CREEK), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_PEG_EVAL),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;
// AMI_OVERRIDE_START
#if defined(SgTpv_SUPPORT) && (SgTpv_SUPPORT == 1)
      suppressif NOT ideqval SA_SETUP.PrimaryDisplay == 4;
        numeric varid = SA_SETUP.DelayAfterPwrEn,
          prompt      = STRING_TOKEN (STR_SG_DELAY_AFTR_PWR_EN),
          help        = STRING_TOKEN (STR_SG_DELAY_AFTR_PWR_EN_HELP),
          minimum     = 0,
          maximum     = 1000,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = SG_DELAY_AFTER_POWER_ENABLE,
        endnumeric;
      endif;

      suppressif NOT ideqval SA_SETUP.PrimaryDisplay == 4;
        numeric varid = SA_SETUP.DelayAfterHoldReset,
          prompt      = STRING_TOKEN (STR_SG_DELAY_AFTR_HLD_RST),
          help        = STRING_TOKEN (STR_SG_DELAY_AFTR_HLD_RST_HELP),
          minimum     = 0,
          maximum     = 1000,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = SG_DELAY_AFTER_HOLD_RESET,
        endnumeric;
      endif;
#else
// AMI_OVERRIDE_END
      suppressif NOT ideqval SA_SETUP.PrimaryDisplay == 4;
        numeric varid = SA_SETUP.DelayAfterPwrEn,
          prompt      = STRING_TOKEN (STR_SG_DELAY_AFTR_PWR_EN),
          help        = STRING_TOKEN (STR_SG_DELAY_AFTR_PWR_EN_HELP),
          minimum     = 0,
          maximum     = 1000,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17 
                                                                          ? 300:100), defaultstore = MyStandardDefault,
        endnumeric;
      endif;

      suppressif NOT ideqval SA_SETUP.PrimaryDisplay == 4;
        numeric varid = SA_SETUP.DelayAfterHoldReset,
          prompt      = STRING_TOKEN (STR_SG_DELAY_AFTR_HLD_RST),
          help        = STRING_TOKEN (STR_SG_DELAY_AFTR_HLD_RST_HELP),
          minimum     = 0,
          maximum     = 1000,
          step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17 
                                                                          ? 100:0), defaultstore = MyStandardDefault,
        endnumeric;
      endif;
// AMI_OVERRIDE_START
#endif
// AMI_OVERRIDE_END

// AMI_OVERRIDE_START >>>
#if defined(NB_SETUP_SUPPORT) && (NB_SETUP_SUPPORT == 1)
      goto NB_CSM_VIDEO_FORM_ID, 
        prompt = STRING_TOKEN(STR_NB_CSM_VIDEO_FORM),
        help = STRING_TOKEN(STR_NB_CSM_VIDEO_FORM);
#endif
// AMI_OVERRIDE_END <<<
//
// KblGBegin
//
      suppressif NOT ideqval SA_SETUP.PrimaryDisplay == 4;
        suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17;
          numeric varid = SA_SETUP.DelayAfterOffMethod,
            prompt      = STRING_TOKEN (STR_SG_DELAY_AFTR_OFF_METHOD),
            help        = STRING_TOKEN (STR_SG_DELAY_AFTR_OFF_METHOD_HELP),
            minimum     = 0,
            maximum     = 1000,
            step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
            default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                                                                         ? 0:200), defaultstore = MyStandardDefault,
          endnumeric;
        endif;
      endif;
      suppressif NOT ideqval SA_SETUP.PrimaryDisplay == 4;
        suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17;
          numeric varid = SA_SETUP.DelayAfterLinkEnable,
            prompt      = STRING_TOKEN (STR_SG_DELAY_AFTR_LINK_EN),
            help        = STRING_TOKEN (STR_SG_DELAY_AFTR_LINK_EN_HELP),
            minimum     = 0,
            maximum     = 1000,
            step        = 0,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
            default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                                                                         ? 0:250), defaultstore = MyStandardDefault,
          endnumeric;
        endif;
      endif;
      suppressif NOT ideqval SA_SETUP.PrimaryDisplay == 4;
        suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17;
          oneof varid = SA_SETUP.GenSpeedChangeEnable,
            prompt      = STRING_TOKEN (STR_GEN_SPEED_CHANGE),
            help        = STRING_TOKEN (STR_GEN_SPEED_CHANGE_HELP),
            default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                                                                         ? 0x0:0x1), defaultstore = MyStandardDefault,
            option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;
      endif;
//
// KblGEnd
//

      suppressif ideqval SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeSds;
        oneof varid    = SA_SETUP.InternalGraphics,
          prompt   = STRING_TOKEN(STR_INT_GRAPHICS_PROMPT),
          help     = STRING_TOKEN(STR_INT_GRAPHICS_HELP),
// AMI_OVERRIDE_START
          option text = STRING_TOKEN(STR_AUTO_STRING), value = 2, flags = RESET_REQUIRED;
//          default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeA0Rvp3Ppv BoardIdSkylakeULpddr3Rvp5Ppv BoardIdSkylakeURvp7Ppv BoardIdSkylakeAioRvp10CrbPpv BoardIdSkylakeHaloDdr4Rvp11Ppv
//                                                                       ? cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdZumbaBeachServerEv BoardIdZumbaBeachServerCrb
//                                                                       ? 0x2:0x0):0x1), defaultstore = MyStandardDefault,
//          option text = STRING_TOKEN(STR_AUTO_STRING), value = 2, flags = RESET_REQUIRED;
// AMI_OVERRIDE_END
          option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;
//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Changed : STR_AUTO_STRING -> STR_ENABLED_STRING

        oneof varid    = SA_SETUP.GTTSize,
          prompt   = STRING_TOKEN(STR_GTT_SIZE),
          help     = STRING_TOKEN(STR_GTT_SIZE_HELP),
          option text = STRING_TOKEN(GTT_SIZE_2MB), value = 1, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(GTT_SIZE_4MB), value = 2, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(GTT_SIZE_8MB), value = 3, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid    = SA_SETUP.ApertureSize,
// AMI_OVERRIDE_START >>>
          questionid = AUTO_ID(NB_APERTURE_SIZE_KEY),
// AMI_OVERRIDE_END <<<
          prompt   = STRING_TOKEN(STR_APERTURE_SIZE),
          help     = STRING_TOKEN(STR_APERTURE_SIZE_HELP),
// AMI_OVERRIDE_START
          flags   = INTERACTIVE,
//          default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdZumbaBeachServerEv BoardIdZumbaBeachServerCrb BoardIdSkylakeA0Rvp3Ppv BoardIdSkylakeULpddr3Rvp5Ppv BoardIdSkylakeURvp7Ppv BoardIdSkylakeAioRvp10CrbPpv BoardIdSkylakeHaloDdr4Rvp11Ppv
//                        ? 0x1:0x3), defaultstore = MyStandardDefault,
// AMI_OVERRIDE_END
          option text = STRING_TOKEN(APERTURE_SIZE_128MB), value = 0, flags =  RESET_REQUIRED;
// AMI_OVERRIDE_START
          option text = STRING_TOKEN(APERTURE_SIZE_256MB), value = 1, flags =  DEFAULT | MANUFACTURING | RESET_REQUIRED;
//          option text = STRING_TOKEN(APERTURE_SIZE_256MB), value = 1, flags =  RESET_REQUIRED;
// AMI_OVERRIDE_END                        
          option text = STRING_TOKEN(APERTURE_SIZE_512MB), value = 3, flags =  RESET_REQUIRED;
          option text = STRING_TOKEN(APERTURE_SIZE_1024MB), value = 7, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(APERTURE_SIZE_2048MB), value = 15, flags = RESET_REQUIRED;
        endoneof;
//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Remove for Build Failed >>
//      //
//      // IgdDvmt50PreAlloc for SKL CPU
//      //
//      suppressif ideqval SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeSds;
//        oneof varid   = SA_SETUP.IgdDvmt50PreAlloc,
//// AMI_OVERRIDE_START >>>
//          questionid = AUTO_ID(NB_IGD_DVMT50_PREALLOC_KEY),
//// AMI_OVERRIDE_END <<<
//          prompt  = STRING_TOKEN(STR_DVMT50_PRE_ALLOC),
//          help    = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_HELP),
//// AMI_OVERRIDE_START
//          flags   = INTERACTIVE,
////          default value=cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdZumbaBeachServerEv BoardIdZumbaBeachServerCrb
////                       ? 0x1:0x2), defaultstore = MyStandardDefault,
//// AMI_OVERRIDE_END
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_0M), value=0, flags=RESET_REQUIRED;
//// AMI_OVERRIDE_START
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_32M), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
////          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_32M), value = 1, flags = RESET_REQUIRED;
//// AMI_OVERRIDE_END	  
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_64M), value=2, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_4M), value=240, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_8M), value=241, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_12M), value=242, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_16M), value=243, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_20M), value=244, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_24M), value=245, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_28M), value=246, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_32M_F7), value=247, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_36M), value=248, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_40M), value=249, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_44M), value=250, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_48M), value=251, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_52M), value=252, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_56M), value=253, flags=RESET_REQUIRED;
//          option text = STRING_TOKEN(STR_DVMT50_PRE_ALLOC_60M), value=254, flags=RESET_REQUIRED;
//        endoneof;
//      endif;
//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Remove for Build Failed <<

        oneof   varid   = SA_SETUP.IgdDvmt50TotalAlloc,
          prompt  = STRING_TOKEN(STR_DVMT50_DVMT ),
          help    = STRING_TOKEN(STR_DVMT50_DVMT_HELP),
// AMI_OVERRIDE_START
          option text = STRING_TOKEN(STR_DVMT50_ALLOC_256), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//          default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdZumbaBeachServerEv BoardIdZumbaBeachServerCrb
//                        ? 0x2:0x3), defaultstore = MyStandardDefault,
//          option text = STRING_TOKEN(STR_DVMT50_ALLOC_256), value = 2, flags = RESET_REQUIRED;
// AMI_OVERRIDE_END
          option text = STRING_TOKEN(STR_DVMT50_ALLOC_128), value=1, flags=RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DVMT50_ALLOC_MAX), value=3, flags=RESET_REQUIRED;
        endoneof;

// AMI_OVERRIDE_START
#if defined(IntelGraphicsPeimVbt_SUPPORT) && (IntelGraphicsPeimVbt_SUPPORT == 0)
      suppressif TRUE;
#endif
#ifdef FSP_WRAPPER_FLAG
        oneof   varid   = SA_SETUP.PeiGraphicsPeimInit,
          prompt  = STRING_TOKEN(STR_PEI_DISPLAY),
          help    = STRING_TOKEN(STR_PEI_DISPLAY_HELP),
//#ifdef FSP_WRAPPER_FLAG
          option text = STRING_TOKEN (STR_ENABLED_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
//#else
//          option text = STRING_TOKEN (STR_ENABLED_STRING), value = 1, flags = RESET_REQUIRED; 
//          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//#endif
        endoneof;
#else
        oneof   varid   = SA_SETUP.PeiGraphicsPeimInit,
          prompt  = STRING_TOKEN(STR_PEI_DISPLAY),
          help    = STRING_TOKEN(STR_PEI_DISPLAY_HELP),
          option text = STRING_TOKEN (STR_ENABLED_STRING), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
#endif
#if defined(IntelGraphicsPeimVbt_SUPPORT) && (IntelGraphicsPeimVbt_SUPPORT == 0)
      endif;        
#endif
// AMI_OVERRIDE_END      
      suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;
        oneof varid  = SA_SETUP.LowPowerMode,
          prompt   = STRING_TOKEN (STR_LOW_POWER_MODE),
          help     = STRING_TOKEN (STR_LOW_POWER_MODE_HELP),
          option text = STRING_TOKEN (STR_ENABLED_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        endoneof;
      endif;

      //
      // All SKL RVPs will have ALS on ISH
      // ALS support is via ISH vs GFX driver without bios intervention
      // Remvoing the ALS support setup option (Code is kept for supporting ALS via EC only if design supports it)
      //
      suppressif TRUE;
        oneof varid  = SA_SETUP.AlsEnable,
          prompt   = STRING_TOKEN (STR_ACPI_ALS_ENABLE),
          help     = STRING_TOKEN (STR_ACPI_ALS_ENABLE_HELP),
          option text = STRING_TOKEN (STR_ENABLED_STRING), value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;

      suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;
          oneof varid  = SA_SETUP.PanelPowerEnable,
            prompt   = STRING_TOKEN (STR_PANEL_POWER),
            help     = STRING_TOKEN (STR_PANEL_POWER_HELP),
            option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
            option text = STRING_TOKEN (STR_ENABLED_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          endoneof;
      endif;  // suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;

      oneof   varid   = SA_SETUP.PmSupport,
        prompt  = STRING_TOKEN(STR_PM_SUPPORT),
        help    = STRING_TOKEN(STR_PM_SUPPORT_HELP),
        option text = STRING_TOKEN(STR_ENABLED_STRING), value=1, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED_STRING), value=0, flags= RESET_REQUIRED;
      endoneof;

      oneof   varid   = SA_SETUP.PavpEnable,
        prompt  = STRING_TOKEN(STR_PAVP_ENABLE),
        help    = STRING_TOKEN(STR_PAVP_ENABLE_HELP),
        option text = STRING_TOKEN(STR_ENABLED_STRING), value=1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED_STRING), value=0, flags = RESET_REQUIRED;
      endoneof;

      oneof   varid   = SA_SETUP.CdynmaxClampEnable,
        prompt  = STRING_TOKEN(STR_CDYNMAX_CLAMP_ENABLE),
        help    = STRING_TOKEN(STR_CDYNMAX_CLAMP_ENABLE_HELP),
        option text = STRING_TOKEN(STR_ENABLED_STRING), value=1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED_STRING), value=0, flags = RESET_REQUIRED;
      endoneof;

      oneof   varid   = SETUP_DATA.CdClock,
        prompt  = STRING_TOKEN(STR_CD_CLOCK),
        help    = STRING_TOKEN(STR_CD_CLOCK_HELP),
        option text = STRING_TOKEN(STR_CD_CLOCK_337), value= 0, flags= RESET_REQUIRED;
        option text = STRING_TOKEN(STR_CD_CLOCK_450), value= 1, flags= RESET_REQUIRED;
        option text = STRING_TOKEN(STR_CD_CLOCK_540), value= 2, flags= RESET_REQUIRED;
        option text = STRING_TOKEN(STR_CD_CLOCK_675), value= 3, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;


    oneof varid = SA_SETUP.IuerButtonEnable,
      prompt   = STRING_TOKEN(STR_IUER_BUTTON_ENABLE),
      help     = STRING_TOKEN(STR_IUER_BUTTON_ENABLE_HELP),
// AMI_OVERRIDE_START
      option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//      default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakePantherMtn BoardIdSkylakeSds BoardIdKabylakeGrizzlyMtn BoardIdKabylakeCoyoteMtn
//                                                                   ? 0:1), defaultstore = MyStandardDefault,
//      option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
// AMI_OVERRIDE_END
      option text = STRING_TOKEN(STR_ENABLED_STRING), value = 1, flags = RESET_REQUIRED;
    endoneof;

// AMI_OVERRIDE_START >>>
#if defined(CSM_SUPPORT) && (CSM_SUPPORT == 1)
      suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer OR
                 NOT ideqval SETUP_DATA.VideoOpRom == 2 OR
                 ideqval SETUP_DATA.CsmSupport == 0;
        goto IGFX_LCD_FORM_ID,
          prompt  = STRING_TOKEN(STR_IGFX_LCD),
          help    = STRING_TOKEN(STR_IGFX_LCD_HELP);
      endif;
#endif       
// AMI_OVERRIDE_END <<<      

      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorMobile;
        goto IGFX_IUER_FORM_ID,
          prompt  = STRING_TOKEN(STR_IUER_SUPPORT_STRING),
          help    = STRING_TOKEN(STR_IUER_SUPPORT_HELP);
      endif;  // suppres if NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorMobile

endif ;
//ray_override / [TAG-ArrangeSetupMenu] Arrange Setup Menu / Hided <<
    endform;

    form formid = AUTO_ID(COMMON_NB_OPTIONS_FORM_ID),
    title     = STRING_TOKEN(STR_NB_OPTIONS_FORM_TITLE);

      SUBTITLE(STRING_TOKEN(STR_NB_OPTIONS_FORM_SUBTITLE))
      SEPARATOR

      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == TypeTrad;
        text
          help   = STRING_TOKEN(STR_DMI_INFO_HELP),
          text   = STRING_TOKEN(STR_DMI_INFO_NAME),
          text   = STRING_TOKEN(STR_DMI_INFO_VALUE),
          flags  = 0,
          key    = 0;

        SEPARATOR

        oneof varid   = SA_SETUP.DmiMaxLinkSpeed,
          prompt      = STRING_TOKEN(STR_DMI_MAX_SPEED_PROMPT),
          help        = STRING_TOKEN(STR_DMI_MAX_SPEED_HELP),
          option text = STRING_TOKEN (STR_AUTO_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_GEN1),        value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_GEN2),        value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_GEN3),        value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SA_SETUP.DmiGen3EqPh2Enable,
          prompt      = STRING_TOKEN(STR_DMI_GEN3_EQ_PHASE2_PROMPT),
          help        = STRING_TOKEN(STR_GEN3_EQ_PHASE2_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),       value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_STRING),        value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),           value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          inconsistentif
            prompt    = STRING_TOKEN(STR_EQ_PH2_PH3_INCONSISTENT_PROMPT),
            ideqval SA_SETUP.DmiGen3EqPh2Enable == 0 AND ideqval SA_SETUP.DmiGen3EqPh3Method == 1
          endif
        endoneof;

        oneof varid   = SA_SETUP.DmiGen3EqPh3Method,
          prompt      = STRING_TOKEN(STR_DMI_GEN3_EQ_PHASE3_METHOD_PROMPT),
          help        = STRING_TOKEN(STR_GEN3_EQ_PHASE3_METHOD_HELP),
          option text = STRING_TOKEN (STR_AUTO_STRING),           value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_EQ_PH3_METHOD_HWEQ),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_EQ_PH3_METHOD_SWEQ),    value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_EQ_PH3_METHOD_STATIC),  value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_DISABLED_STRING),      value = 4, flags = RESET_REQUIRED;
          inconsistentif
            prompt    = STRING_TOKEN(STR_EQ_PH2_PH3_INCONSISTENT_PROMPT),
            ideqval SA_SETUP.DmiGen3EqPh2Enable == 0 AND ideqval SA_SETUP.DmiGen3EqPh3Method == 1
          endif
        endoneof;
      endif;

      oneof varid    = SA_SETUP.DmiVc1,
        prompt   = STRING_TOKEN(STR_DMI_VC1_PROMPT),
        help     = STRING_TOKEN(STR_DMI_VC1_HELP),
        option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid    = SA_SETUP.DmiVcm,
        prompt   = STRING_TOKEN(STR_DMI_VCM_PROMPT),
        help     = STRING_TOKEN(STR_DMI_VCM_HELP),
        option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
      endoneof;

      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == TypeTrad;
        oneof varid   = SA_SETUP.DmiGen3ProgramStaticEq,
          prompt      = STRING_TOKEN(STR_DMI_GEN3_EQ_PROMPT),
          help        = STRING_TOKEN(STR_PEG_GEN3_EQ_HELP),
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        suppressif ideqval SA_SETUP.DmiGen3ProgramStaticEq == 0;

          goto DMI_GEN3_RP_PRESET_FORM_ID,
            prompt = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_PROMPT1),
            help   = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_HELP1);

          goto DMI_GEN3_EP_PRESET_FORM_ID,
            prompt = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_PROMPT1),
            help   = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_HELP1);

          goto DMI_GEN3_EP_HINT_FORM_ID,
            prompt = STRING_TOKEN(STR_GEN3_END_POINT_HINT_PROMPT1),
            help   = STRING_TOKEN(STR_GEN3_END_POINT_HINT_HELP1);

        endif;

        goto DMI_GEN3_RX_CTLE_CONTROL_FORM_ID,
          prompt = STRING_TOKEN(STR_GEN3_RX_CTLE_CONTROL_PROMPT1),
          help   = STRING_TOKEN(STR_GEN3_RX_CTLE_CONTROL_HELP1);

        oneof varid   = SA_SETUP.DmiAspm,
          prompt      = STRING_TOKEN(STR_DMI_ASPM_PROMPT),
          help        = STRING_TOKEN(STR_DMI_ASPM_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags =  RESET_REQUIRED;
          //option text = STRING_TOKEN(STR_DMI_ASPM_L0S_STRING), value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DMI_ASPM_L1_STRING), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          //option text = STRING_TOKEN(STR_DMI_ASPM_L0SL1_STRING), value = 3, flags = RESET_REQUIRED;
        endoneof;

        oneof varid = SA_SETUP.DmiExtSync,
          prompt   = STRING_TOKEN(STR_DMI_EXT_SYNCH_PROMPT),
          help     = STRING_TOKEN(STR_DMI_EXT_SYNCH_HELP),
          option text  = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
          option text  = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;

        oneof varid = SA_SETUP.DmiDeEmphasis,
          prompt   = STRING_TOKEN(STR_DMI_DE_EMPHASIS_PROMPT),
          help     = STRING_TOKEN(STR_DMI_DE_EMPHASIS_HELP),
          option text  = STRING_TOKEN (STR_6DB_STRING),  value = 0, flags = RESET_REQUIRED;
          option text  = STRING_TOKEN (STR_35DB_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;


        oneof varid   = SA_SETUP.DmiIot,
          prompt      = STRING_TOKEN(STR_PCH_DMI_IOT_PROMPT),
          help        = STRING_TOKEN(STR_PCH_DMI_IOT_HELP),
          option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;


    endform;

    form formid = AUTO_ID(DMI_GEN3_RP_PRESET_FORM_ID),
    title       = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_TITLE1);

      SUBTITLE(STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_SUBTITLE1))
      SEPARATOR

      numeric varid = SA_SETUP.DmiGen3RootPortPreset[OFFSET_0],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_ROOT_PORT_PRESET_LANE0_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE0_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 4,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3RootPortPreset[OFFSET_1],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_ROOT_PORT_PRESET_LANE1_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE1_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 4,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3RootPortPreset[OFFSET_2],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_ROOT_PORT_PRESET_LANE2_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE2_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 4,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3RootPortPreset[OFFSET_3],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_ROOT_PORT_PRESET_LANE3_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE3_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 4,
      endnumeric;

    endform;

    form formid = AUTO_ID(DMI_GEN3_EP_PRESET_FORM_ID),
    title       = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_TITLE1);

      SUBTITLE(STRING_TOKEN(STR_GEN3_END_POINT_PRESET_SUBTITLE1))
      SEPARATOR

      numeric varid = SA_SETUP.DmiGen3EndPointPreset[OFFSET_0],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_END_POINT_PRESET_LANE0_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE0_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointPreset[OFFSET_1],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_END_POINT_PRESET_LANE1_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE1_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointPreset[OFFSET_2],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_END_POINT_PRESET_LANE2_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE2_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointPreset[OFFSET_3],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_END_POINT_PRESET_LANE3_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE3_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;

    endform;

    form formid = AUTO_ID(DMI_GEN3_EP_HINT_FORM_ID),
    title       = STRING_TOKEN(STR_GEN3_END_POINT_HINT_TITLE1);

      SUBTITLE(STRING_TOKEN(STR_GEN3_END_POINT_HINT_SUBTITLE1))
      SEPARATOR

      numeric varid = SA_SETUP.DmiGen3EndPointHint[OFFSET_0],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_END_POINT_HINT_LANE0_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE0_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointHint[OFFSET_1],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_END_POINT_HINT_LANE1_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE1_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointHint[OFFSET_2],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_END_POINT_HINT_LANE2_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE2_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.DmiGen3EndPointHint[OFFSET_3],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_END_POINT_HINT_LANE3_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE3_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;

    endform;

    form formid = AUTO_ID(DMI_GEN3_RX_CTLE_CONTROL_FORM_ID),
    title       = STRING_TOKEN(STR_GEN3_RX_CTLE_CONTROL_TITLE1);

      SUBTITLE(STRING_TOKEN(STR_GEN3_RX_CTLE_CONTROL_SUBTITLE1))
      SEPARATOR

      numeric varid = SA_SETUP.DmiGen3RxCtlePeaking[OFFSET_0],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_RX_CTLE_BUNDLE0_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE0_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 3,
      endnumeric;

      numeric varid = SA_SETUP.DmiGen3RxCtlePeaking[OFFSET_1],
        prompt      = STRING_TOKEN(STR_DMI_GEN3_RX_CTLE_BUNDLE1_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE1_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 3,
      endnumeric;

    endform;

//--------------------------------

    form formid = AUTO_ID(PEG_FORM_ID),
    title     = STRING_TOKEN(STR_PEG_ROOTPORT_TITLE);

      SUBTITLE(STRING_TOKEN(STR_PEG_ROOTPORT_SUBTITLE))

      SEPARATOR

      text
        help   = STRING_TOKEN(STR_PEG0_INFO_HELP),
        text   = STRING_TOKEN(STR_PEG0_INFO_NAME),
        text   = STRING_TOKEN(STR_PEG0_INFO_VALUE),
        flags  = 0,
        key    = 0;
      oneof varid   = SA_SETUP.Peg0Enable,
        prompt      = STRING_TOKEN(STR_PEG0_ENABLE_PROMPT),
        help        = STRING_TOKEN(STR_PCIE_ENABLE_HELP),
//
// KblGBegin
//
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 2:1), defaultstore = MyStandardDefault,
//
// KblGEnd
//
        option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = MANUFACTURING | RESET_REQUIRED;
      endoneof;
      oneof varid   = SA_SETUP.Peg0MaxLinkSpeed,
        prompt      = STRING_TOKEN(STR_PEG0_GENX_SUPPORT_PROMPT),
        help        = STRING_TOKEN(STR_PEG0_GENX_SUPPORT_HELP),
        option text = STRING_TOKEN(STR_AUTO_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GEN1),        value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GEN2),        value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GEN3),        value = 3, flags = RESET_REQUIRED;
      endoneof;
      suppressif ideqval SETUP_VOLATILE_DATA.PegPresent[OFFSET_0] == 0x0;
        oneof varid   = SA_SETUP.Peg0MaxLinkWidth,
          prompt      = STRING_TOKEN(STR_PEG0_FORCE_XN_PROMPT),
          help        = STRING_TOKEN(STR_PEG_FORCE_XN_HELP),
          option text = STRING_TOKEN(STR_AUTO_STRING),          value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PEG_FORCE_X1_PROMPT),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PEG_FORCE_X2_PROMPT),  value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PEG_FORCE_X4_PROMPT),  value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PEG_FORCE_X8_PROMPT),  value = 4, flags = RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg0PowerDownUnusedLanes,
          prompt      = STRING_TOKEN(STR_PEG0_PWRDN_UNUSED_BUNDLES_PROMPT),
          help        = STRING_TOKEN(STR_PEG0_PWRDN_UNUSED_BUNDLES_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),       value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),           value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg0Gen3EqPh2Enable,
          prompt      = STRING_TOKEN(STR_PEG0_GEN3_EQ_PHASE2_PROMPT),
          help        = STRING_TOKEN(STR_GEN3_EQ_PHASE2_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),       value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_STRING),        value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),           value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          inconsistentif
            prompt    = STRING_TOKEN(STR_EQ_PH2_PH3_INCONSISTENT_PROMPT),
            ideqval SA_SETUP.Peg0Gen3EqPh2Enable == 0 AND ideqval SA_SETUP.Peg0Gen3EqPh3Method == 1
          endif
        endoneof;
        oneof varid   = SA_SETUP.Peg0Gen3EqPh3Method,
          prompt      = STRING_TOKEN(STR_PEG0_GEN3_EQ_PHASE3_METHOD_PROMPT),
          help        = STRING_TOKEN(STR_GEN3_EQ_PHASE3_METHOD_HELP),
          default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                                                                     ? 0:3), defaultstore = MyStandardDefault,
          option text = STRING_TOKEN(STR_AUTO_STRING),           value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EQ_PH3_METHOD_HWEQ),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EQ_PH3_METHOD_SWEQ),    value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EQ_PH3_METHOD_STATIC),  value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED_STRING),       value = 4, flags = RESET_REQUIRED;
          inconsistentif
            prompt    = STRING_TOKEN(STR_EQ_PH2_PH3_INCONSISTENT_PROMPT),
            ideqval SA_SETUP.Peg0Gen3EqPh2Enable == 0 AND ideqval SA_SETUP.Peg0Gen3EqPh3Method == 1
          endif
        endoneof;
        oneof varid   = SA_SETUP.PegAspm[0],
          prompt      = STRING_TOKEN(STR_PEG0_ASPM_PROMPT),
          help        = STRING_TOKEN(STR_PEG0_ASPM_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),        value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),            value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_PROMPT),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ASPM_L1_PROMPT),    value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_PROMPT), value = 3, flags = RESET_REQUIRED;
        endoneof;
//ray_override / [XI-BringUp] Bring Up Porting / PCIe ASPM Disabled
        suppressif ideqval SA_SETUP.PegAspm[0] == 0x0
            OR ideqval SA_SETUP.PegAspm[0] == 2
            OR ideqval SA_SETUP.PegAspm[0] == 4;
              oneof varid   = SA_SETUP.PegAspmL0s[0],
                prompt      = STRING_TOKEN(STR_PEG0_ASPM_L0S_PROMPT),
                help        = STRING_TOKEN(STR_PEG0_ASPM_L0S_HELP),
                option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_RP_STRING),    value = 1, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_EP_STRING),    value = 2, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_BOTH_STRING),  value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              endoneof;
        endif;
        oneof varid    = SA_SETUP.PegDeEmphasis[0],
          prompt       = STRING_TOKEN(STR_PEG0_DE_EMPHASIS_PROMPT),
          help         = STRING_TOKEN(STR_PEG0_DE_EMPHASIS_HELP),
          option text  = STRING_TOKEN (STR_6DB_STRING),  value = 0, flags = RESET_REQUIRED;
          option text  = STRING_TOKEN (STR_35DB_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg0ObffEnable,
          prompt   = STRING_TOKEN (STR_PEG0_OBFF_PROMPT),
          help     = STRING_TOKEN (STR_PEG0_OBFF_HELP),
          option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg0LtrEnable,
          prompt   = STRING_TOKEN (STR_PEG0_LTR_PROMPT),
          help     = STRING_TOKEN (STR_PEG0_LTR_HELP),
          option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;
      //
      // PEG0 Slot Capabilities
      //
      numeric varid = SA_SETUP.PegSlotPowerLimitValue[0],
        prompt      = STRING_TOKEN(STR_PEG0_SLOT_POWER_LIMIT_VALUE_PROMPT),
        help        = STRING_TOKEN(STR_PEG_SLOT_POWER_LIMIT_VALUE_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 75,
      endnumeric;
      oneof varid   = SA_SETUP.PegSlotPowerLimitScale[0],
        prompt      = STRING_TOKEN(STR_PEG0_SLOT_POWER_LIMIT_SCALE_PROMPT),
        help        = STRING_TOKEN(STR_PEG_SLOT_POWER_LIMIT_SCALE_HELP),
        option text = STRING_TOKEN(STR_POWER_LIMIT_SCALE_1_0X_STRING),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_POWER_LIMIT_SCALE_0_1X_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_POWER_LIMIT_SCALE_0_01X_STRING),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_POWER_LIMIT_SCALE_0_001X_STRING), value = 3, flags = RESET_REQUIRED;
      endoneof;
      numeric varid = SA_SETUP.PegPhysicalSlotNumber[0],
        prompt      = STRING_TOKEN(STR_PEG0_SLOT_NUMBER_PROMPT),
        help        = STRING_TOKEN(STR_PEG_SLOT_NUMBER_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 8191,
        step        = 1,
        default     = 1,
      endnumeric;
      //
      // PEG0 Hotplug resource allocation
      //
      suppressif NOT ideqval SA_SETUP.Peg0Enable == 1;
        oneof varid   = SA_SETUP.PegRootPortHPE[0],
          prompt      = STRING_TOKEN(STR_PEG0_HPE_PROMPT),
          help        = STRING_TOKEN(STR_PEG_HPE_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif NOT ideqval SA_SETUP.PegRootPortHPE[0] == 1;
        numeric varid = SA_SETUP.PegExtraBusRsvd[0],
          prompt      = STRING_TOKEN (STR_PEG0_RBUS_PROMPT),
          help        = STRING_TOKEN (STR_PEG_RBUS_HELP),
          minimum     = 0,
          maximum     = 7,
          step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 0,    // default no extra bus reserved
        endnumeric;

        numeric varid = SA_SETUP.PegMemRsvd[0],
          prompt      = STRING_TOKEN (STR_PEG0_RMEM_PROMPT),
          help        = STRING_TOKEN (STR_PEG_RMEM_HELP),
          minimum     = 1,
          maximum     = 20,
          step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 10,   // Default 10MB Memory Reserved
        endnumeric;

        numeric varid = SA_SETUP.PegIoRsvd[0],
          prompt      = STRING_TOKEN (STR_PEG0_RVIO_PROMPT),
          help        = STRING_TOKEN (STR_PEG_RVIO_HELP),
          minimum     = 4,
          maximum     = 20,
          step        = 4,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 4,    // Default 4K IO Reserved
        endnumeric;
      endif;

      text
        help   = STRING_TOKEN(STR_PEG1_INFO_HELP),
        text   = STRING_TOKEN(STR_PEG1_INFO_NAME),
        text   = STRING_TOKEN(STR_PEG1_INFO_VALUE),
        flags  = 0,
        key    = 0;
      oneof varid   = SA_SETUP.Peg1Enable,
        prompt      = STRING_TOKEN(STR_PEG1_ENABLE_PROMPT),
        help        = STRING_TOKEN(STR_PCIE_ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;
//
// KblGBegin
//
      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17;
        suppressif NOT ideqval SA_SETUP.Peg1Enable == 1;
          oneof varid   = SA_SETUP.PegComplianceModeTest,
            prompt      = STRING_TOKEN(STR_PEG1_COMPLIANCE_MODE_TEST),
            help        = STRING_TOKEN(STR_PEG1_COMPLIANCE_MODE_TEST_HELP),
            option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
          endoneof;
        endif;
      endif;
//
// KblGEnd
//
      oneof varid   = SA_SETUP.Peg1MaxLinkSpeed,
        prompt      = STRING_TOKEN(STR_PEG1_GENX_SUPPORT_PROMPT),
        help        = STRING_TOKEN(STR_PEG1_GENX_SUPPORT_HELP),
        option text = STRING_TOKEN (STR_AUTO_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_GEN1),        value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_GEN2),        value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_GEN3),        value = 3, flags = RESET_REQUIRED;
      endoneof;
      suppressif ideqval SETUP_VOLATILE_DATA.PegPresent[OFFSET_1] == 0x0;
        oneof varid   = SA_SETUP.Peg1MaxLinkWidth,
          prompt      = STRING_TOKEN(STR_PEG1_FORCE_XN_PROMPT),
          help        = STRING_TOKEN(STR_PEG_FORCE_XN_HELP),
          option text = STRING_TOKEN(STR_AUTO_STRING),            value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PEG_FORCE_X1_PROMPT),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PEG_FORCE_X2_PROMPT),    value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PEG_FORCE_X4_PROMPT),    value = 3, flags = RESET_REQUIRED;
          //option text = STRING_TOKEN(STR_PEG_FORCE_X8_PROMPT),  value = 4, flags = RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg1PowerDownUnusedLanes,
          prompt      = STRING_TOKEN(STR_PEG1_PWRDN_UNUSED_BUNDLES_PROMPT),
          help        = STRING_TOKEN(STR_PEG1_PWRDN_UNUSED_BUNDLES_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),       value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),           value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg1Gen3EqPh2Enable,
          prompt      = STRING_TOKEN(STR_PEG1_GEN3_EQ_PHASE2_PROMPT),
          help        = STRING_TOKEN(STR_GEN3_EQ_PHASE2_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),       value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_STRING),        value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),           value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          inconsistentif
            prompt    = STRING_TOKEN(STR_EQ_PH2_PH3_INCONSISTENT_PROMPT),
            ideqval SA_SETUP.Peg1Gen3EqPh2Enable == 0 AND ideqval SA_SETUP.Peg1Gen3EqPh3Method == 1
          endif
        endoneof;
        oneof varid   = SA_SETUP.Peg1Gen3EqPh3Method,
          prompt      = STRING_TOKEN(STR_PEG1_GEN3_EQ_PHASE3_METHOD_PROMPT),
          help        = STRING_TOKEN(STR_GEN3_EQ_PHASE3_METHOD_HELP),
          option text = STRING_TOKEN(STR_AUTO_STRING),           value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EQ_PH3_METHOD_HWEQ),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EQ_PH3_METHOD_SWEQ),    value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EQ_PH3_METHOD_STATIC),  value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED_STRING),       value = 4, flags = RESET_REQUIRED;
          inconsistentif
            prompt    = STRING_TOKEN(STR_EQ_PH2_PH3_INCONSISTENT_PROMPT),
            ideqval SA_SETUP.Peg1Gen3EqPh2Enable == 0 AND ideqval SA_SETUP.Peg1Gen3EqPh3Method == 1
          endif
        endoneof;
        oneof varid   = SA_SETUP.PegAspm[1],
          prompt      = STRING_TOKEN(STR_PEG1_ASPM_PROMPT),
          help        = STRING_TOKEN(STR_PEG1_ASPM_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),        value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),            value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_PROMPT),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ASPM_L1_PROMPT),    value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_PROMPT), value = 3, flags = RESET_REQUIRED;
        endoneof;
//ray_override / [XI-BringUp] Bring Up Porting / PCIe ASPM Disabled
        suppressif ideqval SA_SETUP.PegAspm[1] == 0x0
            OR ideqval SA_SETUP.PegAspm[1] == 2
            OR ideqval SA_SETUP.PegAspm[1] == 4;
              oneof varid   = SA_SETUP.PegAspmL0s[1],
                prompt      = STRING_TOKEN(STR_PEG1_ASPM_L0S_PROMPT),
                help        = STRING_TOKEN(STR_PEG1_ASPM_L0S_HELP),
                option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_RP_STRING),    value = 1, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_EP_STRING),    value = 2, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_BOTH_STRING),  value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              endoneof;
        endif;
        oneof varid    = SA_SETUP.PegDeEmphasis[1],
          prompt       = STRING_TOKEN(STR_PEG1_DE_EMPHASIS_PROMPT),
          help         = STRING_TOKEN(STR_PEG1_DE_EMPHASIS_HELP),
          option text  = STRING_TOKEN (STR_6DB_STRING),  value = 0, flags = RESET_REQUIRED;
          option text  = STRING_TOKEN (STR_35DB_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg1ObffEnable,
          prompt   = STRING_TOKEN (STR_PEG1_OBFF_PROMPT),
          help     = STRING_TOKEN (STR_PEG1_OBFF_HELP),
          option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg1LtrEnable,
          prompt   = STRING_TOKEN (STR_PEG1_LTR_PROMPT),
          help     = STRING_TOKEN (STR_PEG1_LTR_HELP),
          option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;
      //
      // PEG1 Slot Capabilities
      //
      numeric varid = SA_SETUP.PegSlotPowerLimitValue[1],
        prompt      = STRING_TOKEN(STR_PEG1_SLOT_POWER_LIMIT_VALUE_PROMPT),
        help        = STRING_TOKEN(STR_PEG_SLOT_POWER_LIMIT_VALUE_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 75,
      endnumeric;
      oneof varid   = SA_SETUP.PegSlotPowerLimitScale[1],
        prompt      = STRING_TOKEN(STR_PEG1_SLOT_POWER_LIMIT_SCALE_PROMPT),
        help        = STRING_TOKEN(STR_PEG_SLOT_POWER_LIMIT_SCALE_HELP),
        option text = STRING_TOKEN(STR_POWER_LIMIT_SCALE_1_0X_STRING),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_POWER_LIMIT_SCALE_0_1X_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_POWER_LIMIT_SCALE_0_01X_STRING),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_POWER_LIMIT_SCALE_0_001X_STRING), value = 3, flags = RESET_REQUIRED;
      endoneof;
      numeric varid = SA_SETUP.PegPhysicalSlotNumber[1],
        prompt      = STRING_TOKEN(STR_PEG1_SLOT_NUMBER_PROMPT),
        help        = STRING_TOKEN(STR_PEG_SLOT_NUMBER_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 8191,
        step        = 1,
        default     = 2,
      endnumeric;
      //
      // PEG1 Hotplug resource allocation
      //
      suppressif NOT ideqval SA_SETUP.Peg1Enable == 1;
        oneof varid   = SA_SETUP.PegRootPortHPE[1],
          prompt      = STRING_TOKEN(STR_PEG1_HPE_PROMPT),
          help        = STRING_TOKEN(STR_PEG_HPE_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif NOT ideqval SA_SETUP.PegRootPortHPE[1] == 1;
        numeric varid = SA_SETUP.PegExtraBusRsvd[1],
          prompt      = STRING_TOKEN (STR_PEG1_RBUS_PROMPT),
          help        = STRING_TOKEN (STR_PEG_RBUS_HELP),
          minimum     = 0,
          maximum     = 7,
          step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 0,    // default no extra bus reserved
        endnumeric;

        numeric varid = SA_SETUP.PegMemRsvd[1],
          prompt      = STRING_TOKEN (STR_PEG1_RMEM_PROMPT),
          help        = STRING_TOKEN (STR_PEG_RMEM_HELP),
          minimum     = 1,
          maximum     = 20,
          step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 10,   // Default 10MB Memory Reserved
        endnumeric;

        numeric varid = SA_SETUP.PegIoRsvd[1],
          prompt      = STRING_TOKEN (STR_PEG1_RVIO_PROMPT),
          help        = STRING_TOKEN (STR_PEG_RVIO_HELP),
          minimum     = 4,
          maximum     = 20,
          step        = 4,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 4,    // Default 4K IO Reserved
        endnumeric;
      endif;

      suppressif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;
        text
          help   = STRING_TOKEN(STR_PEG2_INFO_HELP),
          text   = STRING_TOKEN(STR_PEG2_INFO_NAME),
          text   = STRING_TOKEN(STR_PEG2_INFO_VALUE),
          flags  = 0,
          key    = 0;
        oneof varid   = SA_SETUP.Peg2Enable,
          prompt      = STRING_TOKEN(STR_PEG2_ENABLE_PROMPT),
          help        = STRING_TOKEN(STR_PCIE_ENABLE_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),     value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg2MaxLinkSpeed,
          prompt      = STRING_TOKEN(STR_PEG2_GENX_SUPPORT_PROMPT),
          help        = STRING_TOKEN(STR_PEG2_GENX_SUPPORT_HELP),
          option text = STRING_TOKEN (STR_AUTO_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_GEN1),        value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_GEN2),        value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN (STR_GEN3),        value = 3, flags = RESET_REQUIRED;
        endoneof;
      endif;
      suppressif ideqval SETUP_VOLATILE_DATA.PegPresent[OFFSET_2] == 0x0;
        oneof varid   = SA_SETUP.Peg2MaxLinkWidth,
          prompt      = STRING_TOKEN(STR_PEG2_FORCE_XN_PROMPT),
          help        = STRING_TOKEN(STR_PEG_FORCE_XN_HELP),
          option text = STRING_TOKEN(STR_AUTO_STRING),            value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PEG_FORCE_X1_PROMPT),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PEG_FORCE_X2_PROMPT),    value = 2, flags = RESET_REQUIRED;
          //option text = STRING_TOKEN(STR_PEG_FORCE_X4_PROMPT),  value = 3, flags = RESET_REQUIRED;
          //option text = STRING_TOKEN(STR_PEG_FORCE_X8_PROMPT),  value = 4, flags = RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg2PowerDownUnusedLanes,
          prompt      = STRING_TOKEN(STR_PEG2_PWRDN_UNUSED_BUNDLES_PROMPT),
          help        = STRING_TOKEN(STR_PEG2_PWRDN_UNUSED_BUNDLES_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),       value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),           value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg2Gen3EqPh2Enable,
          prompt      = STRING_TOKEN(STR_PEG2_GEN3_EQ_PHASE2_PROMPT),
          help        = STRING_TOKEN(STR_GEN3_EQ_PHASE2_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),       value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED_STRING),        value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),           value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          inconsistentif
            prompt    = STRING_TOKEN(STR_EQ_PH2_PH3_INCONSISTENT_PROMPT),
            ideqval SA_SETUP.Peg2Gen3EqPh2Enable == 0 AND ideqval SA_SETUP.Peg2Gen3EqPh3Method == 1
          endif
        endoneof;
        oneof varid   = SA_SETUP.Peg2Gen3EqPh3Method,
          prompt      = STRING_TOKEN(STR_PEG2_GEN3_EQ_PHASE3_METHOD_PROMPT),
          help        = STRING_TOKEN(STR_GEN3_EQ_PHASE3_METHOD_HELP),
          option text = STRING_TOKEN(STR_AUTO_STRING),           value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EQ_PH3_METHOD_HWEQ),    value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EQ_PH3_METHOD_SWEQ),    value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_EQ_PH3_METHOD_STATIC),  value = 3, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED_STRING),       value = 4, flags = RESET_REQUIRED;
          inconsistentif
            prompt    = STRING_TOKEN(STR_EQ_PH2_PH3_INCONSISTENT_PROMPT),
            ideqval SA_SETUP.Peg2Gen3EqPh2Enable == 0 AND ideqval SA_SETUP.Peg2Gen3EqPh3Method == 1
          endif
        endoneof;
        oneof varid   = SA_SETUP.PegAspm[2],
          prompt      = STRING_TOKEN(STR_PEG2_ASPM_PROMPT),
          help        = STRING_TOKEN(STR_PEG2_ASPM_HELP),
          option text = STRING_TOKEN(STR_DISABLED_STRING),        value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_AUTO_STRING),            value = 4, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_PROMPT),   value = 1, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ASPM_L1_PROMPT),    value = 2, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_PCIE_ASPM_L0SL1_PROMPT), value = 3, flags = RESET_REQUIRED;
        endoneof;
//ray_override / [XI-BringUp] Bring Up Porting / PCIe ASPM Disabled
        suppressif ideqval SA_SETUP.PegAspm[2] == 0x0
            OR ideqval SA_SETUP.PegAspm[2] == 2
            OR ideqval SA_SETUP.PegAspm[2] == 4;
              oneof varid   = SA_SETUP.PegAspmL0s[2],
                prompt      = STRING_TOKEN(STR_PEG2_ASPM_L0S_PROMPT),
                help        = STRING_TOKEN(STR_PEG2_ASPM_L0S_HELP),
                option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_RP_STRING),    value = 1, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_EP_STRING),    value = 2, flags = RESET_REQUIRED;
                option text = STRING_TOKEN(STR_PCIE_ASPM_L0S_BOTH_STRING),  value = 3, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
              endoneof;
        endif;
        oneof varid    = SA_SETUP.PegDeEmphasis[2],
          prompt       = STRING_TOKEN(STR_PEG2_DE_EMPHASIS_PROMPT),
          help         = STRING_TOKEN(STR_PEG2_DE_EMPHASIS_HELP),
          option text  = STRING_TOKEN (STR_6DB_STRING),  value = 0, flags = RESET_REQUIRED;
          option text  = STRING_TOKEN (STR_35DB_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg2ObffEnable,
          prompt   = STRING_TOKEN (STR_PEG2_OBFF_PROMPT),
          help     = STRING_TOKEN (STR_PEG2_OBFF_HELP),
          option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
        oneof varid   = SA_SETUP.Peg2LtrEnable,
          prompt   = STRING_TOKEN (STR_PEG2_LTR_PROMPT),
          help     = STRING_TOKEN (STR_PEG2_LTR_HELP),
          option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        endoneof;
      endif;
      //
      // PEG2 Slot Capabilities
      //
      numeric varid = SA_SETUP.PegSlotPowerLimitValue[2],
        prompt      = STRING_TOKEN(STR_PEG2_SLOT_POWER_LIMIT_VALUE_PROMPT),
        help        = STRING_TOKEN(STR_PEG_SLOT_POWER_LIMIT_VALUE_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 255,
        step        = 1,
        default     = 75,
      endnumeric;
      oneof varid   = SA_SETUP.PegSlotPowerLimitScale[2],
        prompt      = STRING_TOKEN(STR_PEG2_SLOT_POWER_LIMIT_SCALE_PROMPT),
        help        = STRING_TOKEN(STR_PEG_SLOT_POWER_LIMIT_SCALE_HELP),
        option text = STRING_TOKEN(STR_POWER_LIMIT_SCALE_1_0X_STRING),   value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_POWER_LIMIT_SCALE_0_1X_STRING),   value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_POWER_LIMIT_SCALE_0_01X_STRING),  value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_POWER_LIMIT_SCALE_0_001X_STRING), value = 3, flags = RESET_REQUIRED;
      endoneof;
      numeric varid = SA_SETUP.PegPhysicalSlotNumber[2],
        prompt      = STRING_TOKEN(STR_PEG2_SLOT_NUMBER_PROMPT),
        help        = STRING_TOKEN(STR_PEG_SLOT_NUMBER_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 8191,
        step        = 1,
        default     = 3,
      endnumeric;
      //
      // PEG2 Hotplug resource allocation
      //
      suppressif NOT ideqval SA_SETUP.Peg2Enable == 1;
        oneof varid   = SA_SETUP.PegRootPortHPE[2],
          prompt      = STRING_TOKEN(STR_PEG2_HPE_PROMPT),
          help        = STRING_TOKEN(STR_PEG_HPE_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      suppressif NOT ideqval SA_SETUP.PegRootPortHPE[2] == 1;
        numeric varid = SA_SETUP.PegExtraBusRsvd[2],
          prompt      = STRING_TOKEN (STR_PEG2_RBUS_PROMPT),
          help        = STRING_TOKEN (STR_PEG_RBUS_HELP),
          minimum     = 0,
          maximum     = 7,
          step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 0,    // default no extra bus reserved
        endnumeric;

        numeric varid = SA_SETUP.PegMemRsvd[2],
          prompt      = STRING_TOKEN (STR_PEG2_RMEM_PROMPT),
          help        = STRING_TOKEN (STR_PEG_RMEM_HELP),
          minimum     = 1,
          maximum     = 20,
          step        = 1,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 10,   // Default 10MB Memory Reserved
        endnumeric;

        numeric varid = SA_SETUP.PegIoRsvd[2],
          prompt      = STRING_TOKEN (STR_PEG2_RVIO_PROMPT),
          help        = STRING_TOKEN (STR_PEG_RVIO_HELP),
          minimum     = 4,
          maximum     = 20,
          step        = 4,    // Stepping of 0 equates to a manual entering of a value, otherwise it will auto-increment with a left/right arrow
          default     = 4,    // Default 4K IO Reserved
        endnumeric;
      endif;

      suppressif ideqval SETUP_VOLATILE_DATA.PegPresent[OFFSET_0] == 0x0;
        oneof varid     = SA_SETUP.PegMaxPayload[0],
          prompt      = STRING_TOKEN(STR_PEG0_MAX_PAYLOAD_PROMPT),
          help        = STRING_TOKEN(STR_PEG0_MAX_PAYLOAD_HELP),
          option text = STRING_TOKEN(STR_AUTO_STRING), value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_128), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_256), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;
      suppressif ideqval SETUP_VOLATILE_DATA.PegPresent[OFFSET_1] == 0x0;
        oneof varid     = SA_SETUP.PegMaxPayload[1],
          prompt      = STRING_TOKEN(STR_PEG1_MAX_PAYLOAD_PROMPT),
          help        = STRING_TOKEN(STR_PEG1_MAX_PAYLOAD_HELP),
          option text = STRING_TOKEN(STR_AUTO_STRING), value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_128), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_256), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;
      suppressif ideqval SETUP_VOLATILE_DATA.PegPresent[OFFSET_2] == 0x0;
        oneof varid     = SA_SETUP.PegMaxPayload[2],
          prompt      = STRING_TOKEN(STR_PEG2_MAX_PAYLOAD_PROMPT),
          help        = STRING_TOKEN(STR_PEG2_MAX_PAYLOAD_HELP),
          option text = STRING_TOKEN(STR_AUTO_STRING), value = 0xFF, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_128), value = 0, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_256), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      SEPARATOR

// AMI_OVERRIDE_START >>>
#if defined(NB_SETUP_SUPPORT) && (NB_SETUP_SUPPORT == 1)
      goto NB_PEG_PORTING_CONFIGURATION_FORM_ID, 
        prompt = STRING_TOKEN(STR_NB_PEG_PORTING_CONFIGURATION_FORM),
        help = STRING_TOKEN(STR_NB_PEG_PORTING_CONFIGURATION_FORM);
#endif
// AMI_OVERRIDE_END <<<

      oneof varid =  SA_SETUP.InitAspmAfterOprom,
          prompt   = STRING_TOKEN(STR_PCIE_ASPM_AFTER_OPROM_PROMPT),
          help     = STRING_TOKEN(STR_PCIE_ASPM_AFTER_OPROM_HELP),
          option text = STRING_TOKEN(STR_DISABLED),    value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),     value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PegGen3ProgramStaticEq,
        prompt      = STRING_TOKEN(STR_PEG_GEN3_EQ_PROMPT),
        help        = STRING_TOKEN(STR_PEG_GEN3_EQ_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.PegGen3ProgramStaticEq == 0;

        goto GEN3_RP_PRESET_FORM_ID,
          prompt = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_PROMPT2),
          help   = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_HELP2);

        goto GEN3_EP_PRESET_FORM_ID,
          prompt = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_PROMPT2),
          help   = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_HELP2);

        goto GEN3_EP_HINT_FORM_ID,
          prompt = STRING_TOKEN(STR_GEN3_END_POINT_HINT_PROMPT2),
          help   = STRING_TOKEN(STR_GEN3_END_POINT_HINT_HELP2);

      endif;

      goto GEN3_RX_CTLE_CONTROL_FORM_ID,
        prompt = STRING_TOKEN(STR_GEN3_RX_CTLE_CONTROL_PROMPT2),
        help   = STRING_TOKEN(STR_GEN3_RX_CTLE_CONTROL_HELP2);

      text
        help   = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_HELP),
        text   = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_PROMPT),
        text   = STRING_TOKEN(STR_EMPTY_STRING),
        flags  = 0,
        key    = 0;

      oneof varid   = SA_SETUP.Gen3SwEqAlwaysAttempt,
        prompt      = STRING_TOKEN(STR_PEG_GEN3_FORCE_PRESET_SEARCH_PROMPT),
        help        = STRING_TOKEN(STR_PEG_GEN3_FORCE_PRESET_SEARCH_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.Gen3SwEqNumberOfPresets,
        prompt      = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_NUMBER_PROMPT),
        help        = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_NUMBER_HELP),
        option text = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_BEST), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_ALL), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING),  value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PegGen3AllowGpioReset,
        prompt      = STRING_TOKEN(STR_PEG_GEN3_ALLOW_GPIO_RESET_PROMPT),
        help        = STRING_TOKEN(STR_PEG_GEN3_ALLOW_GPIO_RESET_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.Gen3SwEqEnableVocTest,
        prompt      = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_ENABLE_VOC_PROMPT),
        help        = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_ENABLE_VOC_HELP),
        option text = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_JITTER_ONLY_MODE), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_JITTER_VOC_MODE),  value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_AUTO_STRING), value = 2, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      numeric varid = SA_SETUP.Gen3SwEqJitterDwellTime,
        prompt      = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_DWELL_TIME_PROMPT),
        help        = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_DWELL_TIME_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 3000,
      endnumeric;

      numeric varid = SA_SETUP.Gen3SwEqJitterErrorTarget,
        prompt      = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_ERROR_TARGET_PROMPT),
        help        = STRING_TOKEN(STR_PEG_GEN3_PRESET_SEARCH_ERROR_TARGET_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 1,
        maximum     = 65535,
        step        = 1,
        default     = 2,
      endnumeric;

      numeric varid = SA_SETUP.Gen3SwEqVocDwellTime,
        prompt      = STRING_TOKEN(STR_PEG_GEN3_VOC_DWELL_TIME_PROMPT),
        help        = STRING_TOKEN(STR_PEG_GEN3_VOC_DWELL_TIME_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 65535,
        step        = 1,
        default     = 10000,
      endnumeric;

      numeric varid = SA_SETUP.Gen3SwEqVocErrorTarget,
        prompt      = STRING_TOKEN(STR_PEG_GEN3_VOC_ERROR_TARGET_PROMPT),
        help        = STRING_TOKEN(STR_PEG_GEN3_VOC_ERROR_TARGET_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 1,
        maximum     = 65535,
        step        = 1,
        default     = 2,
      endnumeric;

      oneof varid   = SA_SETUP.PegGenerateBdatMarginTable,
        prompt      = STRING_TOKEN(STR_PEG_GENERATE_BDAT_MARGIN_PROMPT),
        help        = STRING_TOKEN(STR_PEG_GENERATE_BDAT_MARGIN_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PEG_BDAT_PORT_DATA_STRING),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.PegRxCemTestingMode,
        prompt      = STRING_TOKEN(STR_PEG_RXCEM_LOOPBACK_PROMPT),
        help        = STRING_TOKEN(STR_PEG_RXCEM_LOOPBACK_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.PegRxCemTestingMode == 0;

        numeric varid = SA_SETUP.PegRxCemLoopbackLane,
          prompt      = STRING_TOKEN(STR_PEG_RXCEM_LOOPBACK_LANE_PROMPT),
          help        = STRING_TOKEN(STR_PEG_RXCEM_LOOPBACK_LANE_HELP),
          flags       = RESET_REQUIRED,
          minimum     = 0,
          maximum     = 15,
          step        = 1,
          default     = 0,
        endnumeric;

        oneof varid   = SA_SETUP.PegRxCemNonProtocolAwareness,
          prompt      = STRING_TOKEN(STR_PEG_RXCEM_NONPROTOCOL_AWARENESS_PROMPT),
          help        = STRING_TOKEN(STR_PEG_RXCEM_NONPROTOCOL_AWARENESS_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

      endif;

      oneof varid   = SA_SETUP.PegDisableSpreadSpectrumClocking,
        prompt      = STRING_TOKEN(STR_PEG_DISABLE_SPREAD_SPECTRUM_CLOCKING_PROMPT),
        help        = STRING_TOKEN(STR_PEG_DISABLE_SPREAD_SPECTRUM_CLOCKING_HELP),
        option text = STRING_TOKEN(STR_ENABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;

    endform;

    form formid = AUTO_ID(GEN3_RP_PRESET_FORM_ID),
    title       = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_TITLE2);

      SUBTITLE(STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_SUBTITLE2))
      SEPARATOR

      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_0],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_ROOT_PORT_PRESET_LANE0_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE0_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:4), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_1],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_ROOT_PORT_PRESET_LANE1_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE1_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:4), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_2],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_ROOT_PORT_PRESET_LANE2_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE2_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:4), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_3],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_ROOT_PORT_PRESET_LANE3_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE3_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:4), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_4],
        prompt      = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE4_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE4_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:4), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_5],
        prompt      = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE5_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE5_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:4), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_6],
        prompt      = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE6_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE6_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:4), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_7],
        prompt      = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE7_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE7_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:4), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_8],
        prompt      = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE8_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE8_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_9],
        prompt      = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE9_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE9_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_10],
        prompt      = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE10_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE10_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_11],
        prompt      = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE11_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE11_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_12],
        prompt      = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE12_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE12_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_13],
        prompt      = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE13_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE13_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_14],
        prompt      = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE14_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE14_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3RootPortPreset[OFFSET_15],
        prompt      = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE15_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_ROOT_PORT_PRESET_LANE15_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
    endform;

//--------------------------------

    form formid = AUTO_ID(GEN3_EP_PRESET_FORM_ID),
    title       = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_TITLE2);

      SUBTITLE(STRING_TOKEN(STR_GEN3_END_POINT_PRESET_SUBTITLE2))
      SEPARATOR

      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_0],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_END_POINT_PRESET_LANE0_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE0_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_1],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_END_POINT_PRESET_LANE1_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE1_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_2],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_END_POINT_PRESET_LANE2_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE2_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_3],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_END_POINT_PRESET_LANE3_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE3_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_4],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE4_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE4_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_5],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE5_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE5_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_6],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE6_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE6_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_7],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE7_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE7_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 7:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_8],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE8_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE8_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_9],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE9_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE9_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_10],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE10_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE10_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_11],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE11_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE11_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_12],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE12_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE12_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_13],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE13_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE13_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_14],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE14_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE14_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointPreset[OFFSET_15],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE15_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_PRESET_LANE15_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 9,
        step        = 1,
        default     = 7,
      endnumeric;
    endform;

//--------------------------------

    form formid = AUTO_ID(GEN3_EP_HINT_FORM_ID),
    title       = STRING_TOKEN(STR_GEN3_END_POINT_HINT_TITLE2);

      SUBTITLE(STRING_TOKEN(STR_GEN3_END_POINT_HINT_SUBTITLE2))
      SEPARATOR

      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_0],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_END_POINT_HINT_LANE0_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE0_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 2:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_1],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_END_POINT_HINT_LANE1_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE1_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 2:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_2],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_END_POINT_HINT_LANE2_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE2_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 2:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_3],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_END_POINT_HINT_LANE3_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE3_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 2:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_4],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE4_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE4_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 2:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_5],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE5_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE5_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 2:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_6],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE6_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE6_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 2:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_7],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE7_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE7_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdKabylakeDdr4Rvp17
                             ? 2:6), defaultstore = MyStandardDefault,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_8],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE8_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE8_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_9],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE9_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE9_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_10],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE10_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE10_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_11],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE11_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE11_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_12],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE12_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE12_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_13],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE13_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE13_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_14],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE14_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE14_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
      numeric varid = SA_SETUP.PegGen3EndPointHint[OFFSET_15],
        prompt      = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE15_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_END_POINT_HINT_LANE15_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 6,
        step        = 1,
        default     = 2,
      endnumeric;
    endform;

//--------------------------------

    form formid = AUTO_ID(GEN3_RX_CTLE_CONTROL_FORM_ID),
    title       = STRING_TOKEN(STR_GEN3_RX_CTLE_CONTROL_TITLE2);

      SUBTITLE(STRING_TOKEN(STR_GEN3_RX_CTLE_CONTROL_SUBTITLE2))
      SEPARATOR

      numeric varid = SA_SETUP.PegGen3RxCtlePeaking[OFFSET_0],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_RX_CTLE_BUNDLE0_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE0_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SA_SETUP.PegGen3RxCtlePeaking[OFFSET_1],
        prompt      = STRING_TOKEN(STR_PEG_GEN3_RX_CTLE_BUNDLE1_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE1_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SA_SETUP.PegGen3RxCtlePeaking[OFFSET_2],
        prompt      = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE2_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE2_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SA_SETUP.PegGen3RxCtlePeaking[OFFSET_3],
        prompt      = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE3_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE3_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SA_SETUP.PegGen3RxCtlePeaking[OFFSET_4],
        prompt      = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE4_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE4_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SA_SETUP.PegGen3RxCtlePeaking[OFFSET_5],
        prompt      = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE5_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE5_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SA_SETUP.PegGen3RxCtlePeaking[OFFSET_6],
        prompt      = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE6_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE6_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 0,
      endnumeric;

      numeric varid = SA_SETUP.PegGen3RxCtlePeaking[OFFSET_7],
        prompt      = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE7_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_RX_CTLE_BUNDLE7_HELP),
        flags       = RESET_REQUIRED,
        minimum     = 0,
        maximum     = 15,
        step        = 1,
        default     = 0,
      endnumeric;

      oneof varid   = SA_SETUP.PegGen3RxCtleOverride,
        prompt      = STRING_TOKEN(STR_GEN3_RX_CTLE_OVERRIDE_PROMPT),
        help        = STRING_TOKEN(STR_GEN3_RX_CTLE_OVERRIDE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endform;

//--------------------------------

    form formid = AUTO_ID(IGFX_LCD_FORM_ID),
    title     = STRING_TOKEN(STR_IGFX_LCD_TITLE);

      SUBTITLE(STRING_TOKEN(STR_IGFX_LCD_SUBTITLE))
      SEPARATOR

      oneof varid    = SA_SETUP.IgdBootType,
        prompt   = STRING_TOKEN(STR_VIDEO_BT_PROMPT),
        help     = STRING_TOKEN(STR_VIDEO_BT_HELP),
        option text = STRING_TOKEN(STR_VIDEO_BT_DEFAULT),      value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP),          value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_VIDEO_BT_LFP),          value = 0x08, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP3),         value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP2),         value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP4),         value = 0x10, flags = RESET_REQUIRED;
      endoneof;

    suppressif ideqval SA_SETUP.IgdBootType == 0x0;
      oneof varid    = SA_SETUP.DisplayPipeB,
        prompt   = STRING_TOKEN(STR_VIDEO_BT_PIPE_B_PROMPT),
        help     = STRING_TOKEN(STR_VIDEO_BT_PIPE_B_HELP),
        option text = STRING_TOKEN(STR_VIDEO_BT_PIPE_B_DISABLED),       value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP),          value = 0x04, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP3),         value = 0x20, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP2),         value = 0x40, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_VIDEO_BT_EFP4),         value = 0x10, flags = RESET_REQUIRED;
      endoneof;
    endif;

      oneof varid     = SA_SETUP.LcdPanelType,
        prompt      = STRING_TOKEN(STR_PANELTYPE_PROMPT),
        help        = STRING_TOKEN(STR_PANELTYPE_HELP),
        option text = STRING_TOKEN(STR_VIDEO_BT_DEFAULT),  value = 0, flags = RESET_REQUIRED | DEFAULT | MANUFACTURING;
        option text = STRING_TOKEN(STR_PANELTYPE_01), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_02), value = 2, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_03), value = 3, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_04), value = 4, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_05), value = 5, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_06), value = 6, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_07), value = 7, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_08), value = 8, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_09), value = 9, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_10), value = 10, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_13), value = 13, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_14), value = 14, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_15), value = 15, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_16), value = 16, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELTYPE_17), value = 17, flags = RESET_REQUIRED;
      endoneof;

      oneof varid     = SA_SETUP.LcdPanelScaling,
        prompt      = STRING_TOKEN(STR_PANELSCALING_PROMPT),
        help        = STRING_TOKEN(STR_PANELSCALING_HELP),
        option text = STRING_TOKEN(STR_PANELSCALING_AUTO), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELSCALING_OFF), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PANELSCALING_FORCE), value = 6, flags = RESET_REQUIRED;
      endoneof;

      oneof varid    = SA_SETUP.IgdLcdBlc,
        prompt   = STRING_TOKEN(STR_VIDEO_LCD_BLC),
        help     = STRING_TOKEN(STR_VIDEO_LCD_BLCHELP),
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC1), value = 0x00, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_VIDEO_LCD_BLC2), value = 0x02, flags =  DEFAULT | MANUFACTURING |RESET_REQUIRED;
      endoneof;

     oneof varid  = SA_SETUP.ActiveLFP,
        prompt   = STRING_TOKEN (STR_ACTIVE_LFP),
        help     = STRING_TOKEN (STR_ACTIVE_LFP_HELP),
        option text = STRING_TOKEN (STR_NO_EDP_STRING), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN (STR_EDPA_LFP_STRING), value = 3, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
     endoneof;

     oneof varid  = SA_SETUP.LfpColorDepth,
        prompt   = STRING_TOKEN (STR_LFP_COLOR_DEPTH),
        help     = STRING_TOKEN (STR_LFP_COLOR_DEPTH_HELP),
        option text = STRING_TOKEN (STR_18BIT_COLOR_DEPTH_STRING), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
        option text = STRING_TOKEN (STR_24BIT_COLOR_DEPTH_STRING), value = 1, flags =  RESET_REQUIRED;
     endoneof;

      numeric varid = SA_SETUP.VbiosBrightness,
        prompt      = STRING_TOKEN (STR_VBIOS_BACKLIGHT),
        help        = STRING_TOKEN (STR_VBIOS_BACKLIGHT_HELP),
        minimum     = 0,
        maximum     = 255,
        step        = 0,
        default     = 255,
      endnumeric;

    endform;

    form formid = AUTO_ID(IGFX_IUER_FORM_ID),
    title     = STRING_TOKEN(STR_IUER_SUPPORT_TITLE);

      SUBTITLE(STRING_TOKEN(STR_IUER_SUPPORT_SUBTITLE))
      SEPARATOR

    oneof varid = SA_SETUP.IuerConvertibleEnable,
      prompt   = STRING_TOKEN(STR_IUER_SLATE_ENABLE),
      help     = STRING_TOKEN(STR_IUER_SLATE_ENABLE_HELP),
// AMI_OVERRIDE_START
      option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//      default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeSds
//                                                                 ? 0x0:0x1), defaultstore = MyStandardDefault,
//      option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
// AMI_OVERRIDE_END
      option text = STRING_TOKEN(STR_ENABLED_STRING), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SA_SETUP.IuerConvertibleEnable == 0;
      oneof varid = SA_SETUP.SlateIndicatorRT,
        prompt   = STRING_TOKEN(STR_SLATE_INDICATOR_RT),
        help     = STRING_TOKEN(STR_SLATE_INDICATOR_RT_HELP),
        option text = STRING_TOKEN(STR_SLATE_STRING), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_LAPTOP_STRING), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid = SA_SETUP.SlateIndicatorSx,
        prompt   = STRING_TOKEN(STR_SLATE_INDICATOR_SX),
        help     = STRING_TOKEN(STR_SLATE_INDICATOR_SX_HELP),
        option text = STRING_TOKEN(STR_SAME_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TOGGLE_STRING), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    oneof varid = SA_SETUP.IuerDockEnable,
      prompt   = STRING_TOKEN(STR_IUER_DOCK_ENABLE),
      help     = STRING_TOKEN(STR_IUER_DOCK_ENABLE_HELP),
// AMI_OVERRIDE_START
      option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
//      default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeSds
//                                                                 ? 0x0:0x1), defaultstore = MyStandardDefault,
//      option text = STRING_TOKEN(STR_DISABLED_STRING), value = 0, flags = RESET_REQUIRED;
// AMI_OVERRIDE_END
      option text = STRING_TOKEN(STR_ENABLED_STRING), value = 1, flags = RESET_REQUIRED;
    endoneof;

    suppressif ideqval SA_SETUP.IuerDockEnable == 0;
      oneof varid = SA_SETUP.DockIndicatorRT,
        prompt   = STRING_TOKEN(STR_DOCK_INDICATOR_RT),
        help     = STRING_TOKEN(STR_DOCK_INDICATOR_RT_HELP),
        option text = STRING_TOKEN(STR_UNDOCK_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DOCK_STRING), value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid = SA_SETUP.DockIndicatorSx,
        prompt   = STRING_TOKEN(STR_DOCK_INDICATOR_SX),
        help     = STRING_TOKEN(STR_DOCK_INDICATOR_SX_HELP),
        option text = STRING_TOKEN(STR_SAME_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_TOGGLE_STRING), value = 1, flags = RESET_REQUIRED;
      endoneof;
    endif;

    endform;

    form formid = AUTO_ID(GT_POWER_CONFIG_FORM_ID),
    title     = STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_TITLE);

      SUBTITLE(STRING_TOKEN(STR_GT_POWER_CONFIG_FORM_SUBTITLE))
      SEPARATOR

        grayoutif ideqval SA_SETUP.PmSupport == 0;
            oneof varid = SA_SETUP.EnableRenderStandby,
              prompt   = STRING_TOKEN(STR_VIDEO_RS2_PROMPT),
              help     = STRING_TOKEN(STR_VIDEO_RS2_HELP),
// AMI_OVERRIDE_START
              option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
//              default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakePantherMtn BoardIdSkylakeStarbrook BoardIdKabylakeGrizzlyMtn BoardIdKabylakeCoyoteMtn
//                                                                           ? 0x1:0x0), defaultstore = MyStandardDefault,
//              option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
// AMI_OVERRIDE_END
              option text = STRING_TOKEN(STR_DISABLED), value =0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
            endoneof;
        endif;
//ray_override / [XI-Tuning] Arrange Setup Default Setting

      //
      // Maximum GT frequency in multiples of 50MHz
      //
      oneof varid   = SA_SETUP.GtFreqMax,
        prompt  = STRING_TOKEN(STR_GT_FREQ),
        help    = STRING_TOKEN(STR_GT_FREQ_HELP),
// AMI_OVERRIDE_START
        option text = STRING_TOKEN(STR_GT_FREQ_DEFAULT), value= 0xFF, flags= DEFAULT | MANUFACTURING | RESET_REQUIRED;
// AMI_OVERRIDE_END        
        option text = STRING_TOKEN(STR_GT_FREQ_100M), value= 2, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_150M), value= 3, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_200M), value= 4, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_250M), value= 5, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_300M), value= 6, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_350M), value= 7, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_400M), value= 8, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_450M), value= 9, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_500M), value= 10, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_550M), value= 11, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_600M), value= 12, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_650M), value= 13, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_700M), value= 14, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_750M), value= 15, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_800M), value= 16, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_850M), value= 17, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_900M), value= 18, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_950M), value= 19, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_1000M), value= 20, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_1050M), value= 21, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_1100M), value= 22, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_1150M), value= 23, flags=RESET_REQUIRED;
        option text = STRING_TOKEN(STR_GT_FREQ_1200M), value= 24, flags=RESET_REQUIRED;
      endoneof;

    endform;

    form formid = AUTO_ID(MEM_TRAINING_FORM_ID),
    title = STRING_TOKEN(STR_MEMORY_TRAINING_ALGOS_PROMPT);

      oneof varid   = SA_SETUP.ECT,
        prompt      = STRING_TOKEN(STR_EARLY_CMD_TRNG_NAME),
        help        = STRING_TOKEN(STR_EARLY_CMD_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.SOT,
        prompt      = STRING_TOKEN(STR_SENSEAMP_TRNG_NAME),
        help        = STRING_TOKEN(STR_SENSEAMP_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags =  RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.ERDMPRTC2D,
        prompt      = STRING_TOKEN(STR_ERDMPRTC2D_TRNG_NAME),
        help        = STRING_TOKEN(STR_EMPTY_STRING),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDMPRT,
        prompt      = STRING_TOKEN(STR_RDMPR_TRNG_NAME),
        help        = STRING_TOKEN(STR_RDMPR_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RCVET,
        prompt      = STRING_TOKEN(STR_RCVEN_TRNG_NAME),
        help        = STRING_TOKEN(STR_RCVEN_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.JWRL,
        prompt      = STRING_TOKEN(STR_JWRL_TRNG_NAME),
        help        = STRING_TOKEN(STR_JWRL_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.EWRTC2D,
        prompt      = STRING_TOKEN(STR_EWRTC2D_TRNG_NAME),
        help        = STRING_TOKEN(STR_EWRTC2D_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.EWRDSEQ,
        prompt      = STRING_TOKEN(STR_EWRDSEQ_TRNG_NAME),
        help        = STRING_TOKEN(STR_EMPTY_STRING),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.ERDTC2D,
        prompt      = STRING_TOKEN(STR_ERDTC2D_TRNG_NAME),
        help        = STRING_TOKEN(STR_EMPTY_STRING),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRTC1D,
        prompt      = STRING_TOKEN(STR_WRTC1D_TRNG_NAME),
        help        = STRING_TOKEN(STR_WRTC1D_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRVC1D,
        prompt      = STRING_TOKEN(STR_WRVC1D_TRNG_NAME),
        help        = STRING_TOKEN(STR_EMPTY_STRING),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDTC1D,
        prompt      = STRING_TOKEN(STR_RDTC1D_TRNG_NAME),
        help        = STRING_TOKEN(STR_RDTC1D_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.DIMMODTT,
        prompt      = STRING_TOKEN(STR_DIMMODTT_TRNG_NAME),
        help        = STRING_TOKEN(STR_DIMMODTT_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      grayoutif ideqval SA_SETUP.DIMMODTT == 0;
        oneof varid    = SA_SETUP.MaxRttWr,
          prompt   = STRING_TOKEN(STR_MAX_RTT_WR_PROMPT),
          help     = STRING_TOKEN(STR_MAX_RTT_WR_HELP),
          option text = STRING_TOKEN (STR_ODT_OFF_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_120_OHMS_STRING), value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

      oneof varid   = SA_SETUP.DIMMRONT,
        prompt      = STRING_TOKEN(STR_DIMMRONT_TRNG_NAME),
        help        = STRING_TOKEN(STR_DIMMRONT_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRDSEQT,
        prompt      = STRING_TOKEN(STR_WRDSEQT_TRNG_NAME),
        help        = STRING_TOKEN(STR_EMPTY_STRING),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRSRT,
        prompt      = STRING_TOKEN(STR_WRSRT_TRNG_NAME),
        help        = STRING_TOKEN(STR_WRSRT_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDODTT,
        prompt      = STRING_TOKEN(STR_RDODTT_TRNG_NAME),
        help        = STRING_TOKEN(STR_RDODTT_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDEQT,
        prompt      = STRING_TOKEN(STR_RDEQT_TRNG_NAME),
        help        = STRING_TOKEN(STR_RDEQT_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDAPT,
        prompt      = STRING_TOKEN(STR_RDAPT_TRNG_NAME),
        help        = STRING_TOKEN(STR_RDAPT_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRTC2D,
        prompt      = STRING_TOKEN(STR_WRTC2D_TRNG_NAME),
        help        = STRING_TOKEN(STR_WRTC2D_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDTC2D,
        prompt      = STRING_TOKEN(STR_RDTC2D_TRNG_NAME),
        help        = STRING_TOKEN(STR_RDTC2D_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.CMDVC,
        prompt      = STRING_TOKEN(STR_CMDVC_TRNG_NAME),
        help        = STRING_TOKEN(STR_CMDVC_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRVC2D,
        prompt      = STRING_TOKEN(STR_WRVC2D_TRNG_NAME),
        help        = STRING_TOKEN(STR_WRVC2D_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RDVC2D,
        prompt      = STRING_TOKEN(STR_RDVC2D_TRNG_NAME),
        help        = STRING_TOKEN(STR_RDVC2D_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.LCT,
        prompt      = STRING_TOKEN(STR_LCT_TRNG_NAME),
        help        = STRING_TOKEN(STR_LCT_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RTL,
        prompt      = STRING_TOKEN(STR_RTL_TRNG_NAME),
        help        = STRING_TOKEN(STR_RTL_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.TAT,
        prompt      = STRING_TOKEN(STR_TAT_TRNG_NAME),
        help        = STRING_TOKEN(STR_TAT_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

#if defined MRC_DEBUG_PRINT_SUPPORT && MRC_DEBUG_PRINT_SUPPORT == 1

      oneof varid   = SA_SETUP.RMT,
        prompt      = STRING_TOKEN(STR_RMT_TRNG_NAME),
        help        = STRING_TOKEN(STR_RMT_TRNG_HELP),
// AMI_OVERRIDE_START >>>
//        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeA0Rvp3Ppv BoardIdSkylakeULpddr3Rvp5Ppv BoardIdSkylakeURvp7Ppv BoardIdSkylakeAioRvp10CrbPpv BoardIdSkylakeHaloDdr4Rvp11Ppv
//                                                                     ? 0x0:0x1), defaultstore = MyStandardDefault,
// AMI_OVERRIDE_END <<<
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

#else // #if defined MRC_DEBUG_PRINT_SUPPORT && MRC_DEBUG_PRINT_SUPPORT == 1

      oneof varid   = SA_SETUP.RMT,
        prompt      = STRING_TOKEN(STR_RMT_TRNG_NAME),
        help        = STRING_TOKEN(STR_RMT_TRNG_HELP),
// AMI_OVERRIDE_START                                            
//        default value = cond(ideqvallist SETUP_VOLATILE_DATA.PlatId == BoardIdSkylakeA0Rvp3Ppv BoardIdSkylakeURvp7Ppv BoardIdSkylakeAioRvp10CrbPpv BoardIdSkylakeHaloDdr4Rvp11Ppv
//                                                                     ? 0x0:0x1), defaultstore = MyStandardDefault,
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
// AMI_OVERRIDE_END	
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

#endif // #if defined MRC_DEBUG_PRINT_SUPPORT && MRC_DEBUG_PRINT_SUPPORT == 1

      oneof varid   = SA_SETUP.MEMTST,
        prompt      = STRING_TOKEN(STR_MEMTST_TRNG_NAME),
        help        = STRING_TOKEN(STR_MEMTST_TRNG_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;


      oneof varid   = SA_SETUP.ALIASCHK,
        prompt      = STRING_TOKEN(STR_ALIASCHK_NAME),
        help        = STRING_TOKEN(STR_ALIASCHK_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RCVENC1D,
        prompt      = STRING_TOKEN(STR_RCVENC1D_NAME),
        help        = STRING_TOKEN(STR_RCVENC1D_NAME),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.RMC,
        prompt      = STRING_TOKEN(STR_RMC_NAME),
        help        = STRING_TOKEN(STR_RMC_NAME),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.WRDSUDT,
        prompt      = STRING_TOKEN(STR_WRDSUDT_NAME),
        help        = STRING_TOKEN(STR_WRDSUDT_NAME),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.CMDSR,
        prompt      = STRING_TOKEN(STR_CMDSR_NAME),
        help        = STRING_TOKEN(STR_CMDSR_NAME),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.CMDDSEQ,
        prompt      = STRING_TOKEN(STR_CMDDSEQ_NAME),
        help        = STRING_TOKEN(STR_CMDDSEQ_NAME),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.CMDNORM,
        prompt      = STRING_TOKEN(STR_CMDNORM_NAME),
        help        = STRING_TOKEN(STR_CMDNORM_NAME),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

    endform;


    form formid = AUTO_ID(MEMORY_THERMAL_CONFIG_FORM_ID),
    title = STRING_TOKEN(STR_MEMORY_THERMAL_CONFIGURATION);

      SUBTITLE(STRING_TOKEN(STR_MEMORY_THERMAL_CONFIGURATION))
      SEPARATOR

      goto MEM_THERMMGT_FORM_ID,
        prompt  = STRING_TOKEN(STR_MEM_THERMMGT),
        help    = STRING_TOKEN(STR_MEM_THERMMGT_HELP1);

      oneof varid    = SA_SETUP.MemoryThermalManagement,
        prompt      = STRING_TOKEN(STR_MEMORY_THERMAL_MANAGEMENT_PROMPT),
        help        = STRING_TOKEN(STR_MEMORY_THERMAL_MANAGEMENT_HELP),
        option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      suppressif ideqval SA_SETUP.MemoryThermalManagement == 0x0;
        oneof varid    = SA_SETUP.PeciInjectedTemp,
          prompt      = STRING_TOKEN(STR_PECI_INJECTED_TEMPERATURE_PROMPT),
          help        = STRING_TOKEN(STR_PECI_INJECTED_TEMPERATURE_HELP),
          option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid    = SA_SETUP.ExttsViaTsOnBoard,
          prompt      = STRING_TOKEN(STR_EXTTS_OVER_TS_ON_BOARD_PROMPT),
          help        = STRING_TOKEN(STR_EXTTS_OVER_TS_ON_BOARD_HELP),
          option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid    = SA_SETUP.ExttsViaTsOnDimm,
          prompt      = STRING_TOKEN(STR_EXTTS_OVER_TS_ON_DIMM_PROMPT),
          help        = STRING_TOKEN(STR_EXTTS_OVER_TS_ON_DIMM_HELP),
          option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid    = SA_SETUP.VirtualTempSensor,
          prompt      = STRING_TOKEN(STR_VIRTUAL_TEMP_SENSOR_PROMPT),
          help        = STRING_TOKEN(STR_VIRTUAL_TEMP_SENSOR_HELP),
          option text = STRING_TOKEN(STR_DISABLED),  value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

    endform;

    form formid = AUTO_ID(MEM_THERMMGT_FORM_ID),
    title       = STRING_TOKEN(STR_MEM_THERMMGT_TITLE);

      SUBTITLE(STRING_TOKEN(STR_MEM_THERMMGT_SUBTITLE))
      SEPARATOR

      oneof varid   = SA_SETUP.EnablePwrDn,
        prompt   = STRING_TOKEN (STR_PWRDN_PROMPT),
        help     = STRING_TOKEN (STR_PWRDN_HELP),
        option text = STRING_TOKEN(STR_PWRDN_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PWRDN_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.EnablePwrDnLpddr,
        prompt   = STRING_TOKEN (STR_PWRDN_LPDDR_PROMPT),
        help     = STRING_TOKEN (STR_PWRDN_LPDDR_HELP),
        option text = STRING_TOKEN(STR_PWRDN_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_PWRDN_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.Refresh2X,
        prompt   = STRING_TOKEN (STR_REFRESH_2X_MODE_PROMPT),
        help     = STRING_TOKEN (STR_REFRESH_2X_MODE_HELP),
        option text = STRING_TOKEN(STR_DISABLED),            value = 0x00, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_REFRESH_2X_WARM_HOT), value = 0x01, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_REFRESH_2X_HOT),      value = 0x02, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.DdrThermalSensor,
        prompt   = STRING_TOKEN (STR_LPDDR_THERMAL_SENSOR_PROMPT),
        help     = STRING_TOKEN (STR_LPDDR_THERMAL_SENSOR_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.SrefCfgEna,
        prompt      = STRING_TOKEN(STR_SREFCFGENA_PROMPT),
        help        = STRING_TOKEN(STR_SREFCFGENA_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      numeric varid = SA_SETUP.SrefCfgIdleTmr,
        prompt  = STRING_TOKEN (STR_SREFCFGIDLETMR_PROMPT),
        help    = STRING_TOKEN (STR_SREFCFGIDLETMR_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 512,
        maximum = 65535,
        step    = 1,
        default = 512,
      endnumeric;

      oneof varid   = SA_SETUP.ThrtCkeMinDefeat,
        prompt      = STRING_TOKEN(STR_THRTCKEMINDEFEAT_PROMPT),
        help        = STRING_TOKEN(STR_THRTCKEMINDEFEAT_HELP),
        option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
      endoneof;

      numeric varid = SA_SETUP.ThrtCkeMinTmr,
        prompt  = STRING_TOKEN (STR_THRTCKEMINTMR_PROMPT),
        help    = STRING_TOKEN (STR_THRTCKEMINTMR_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0x0,
        maximum = 0xFF,
        step    = 1,
        default = 48,
      endnumeric;

      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == TypeUltUlx;
        oneof varid   = SA_SETUP.ThrtCkeMinDefeatLpddr,
          prompt      = STRING_TOKEN(STR_THRTCKEMINDEFEAT_LPDDR_PROMPT),
          help        = STRING_TOKEN(STR_THRTCKEMINDEFEAT_LPDDR_HELP),
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        endoneof;

        numeric varid = SA_SETUP.ThrtCkeMinTmrLpddr,
          prompt  = STRING_TOKEN (STR_THRTCKEMINTMR_LPDDR_PROMPT),
          help    = STRING_TOKEN (STR_THRTCKEMINTMR_LPDDR_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0x0,
          maximum = 0xFF,
          step    = 1,
          default = 64,
        endnumeric;
      endif;

      goto DRAM_POWER_METER_FORM_ID,
        prompt  = STRING_TOKEN(STR_DRAM_POWER_METER),
        help    = STRING_TOKEN(STR_MEM_THERMMGT_HELP2);

      goto MEMORY_THERMAL_REPORTING_FORM_ID,
        prompt  = STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING),
        help    = STRING_TOKEN(STR_MEM_THERMMGT_HELP3);

      goto MEMORY_RAPL_FORM_ID,
        prompt  = STRING_TOKEN(STR_MEMORY_RAPL),
        help    = STRING_TOKEN(STR_MEM_THERMMGT_HELP4);

    endform;

    form formid = AUTO_ID(DRAM_POWER_METER_FORM_ID),
    title       = STRING_TOKEN(STR_DRAM_POWER_METER_TITLE);

      SUBTITLE(STRING_TOKEN(STR_DRAM_POWER_METER_SUBTITLE))
      SEPARATOR

      oneof varid  = SA_SETUP.UserPowerWeightsEn,
        prompt   = STRING_TOKEN (STR_PWR_WEIGHT_PROMPT),
        help     = STRING_TOKEN (STR_PWR_WEIGHT_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      grayoutif (ideqval SA_SETUP.UserPowerWeightsEn == 0);
        numeric varid = SA_SETUP.EnergyScaleFact,
          prompt  = STRING_TOKEN (STR_ENERGYSCALEFACT_PROMPT),
          help    = STRING_TOKEN (STR_ENERGYSCALEFACT_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 7,
          step    = 1,
          default = 4,
        endnumeric;

      SEPARATOR

        numeric varid = SA_SETUP.IdleEnergyCh0Dimm0,
          prompt  = STRING_TOKEN (STR_IDLEENERGYCH0DIMM0_PROMPT),
          help    = STRING_TOKEN (STR_IDLEENERGYCH0DIMM0_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 63,
          step    = 1,
          default = 10,
        endnumeric;

        numeric varid = SA_SETUP.PdEnergyCh0Dimm0,
          prompt  = STRING_TOKEN (STR_PDENERGYCH0DIMM0_PROMPT),
          help    = STRING_TOKEN (STR_PDENERGYCH0DIMM0_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 63,
          step    = 1,
          default = 6,
        endnumeric;

        numeric varid = SA_SETUP.ActEnergyCh0Dimm0,
          prompt  = STRING_TOKEN (STR_ACTENERGYCH0DIMM0_PROMPT),
          help    = STRING_TOKEN (STR_ACTENERGYCH0DIMM0_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 172,
        endnumeric;

        numeric varid = SA_SETUP.RdEnergyCh0Dimm0,
          prompt  = STRING_TOKEN (STR_RDENERGYCH0DIMM0_PROMPT),
          help    = STRING_TOKEN (STR_RDENERGYCH0DIMM0_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 212,
        endnumeric;

        numeric varid = SA_SETUP.WrEnergyCh0Dimm0,
          prompt  = STRING_TOKEN (STR_WRENERGYCH0DIMM0_PROMPT),
          help    = STRING_TOKEN (STR_WRENERGYCH0DIMM0_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 221,
        endnumeric;

      SEPARATOR

        numeric varid = SA_SETUP.IdleEnergyCh0Dimm1,
          prompt  = STRING_TOKEN (STR_IDLEENERGYCH0DIMM1_PROMPT),
          help    = STRING_TOKEN (STR_IDLEENERGYCH0DIMM1_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 63,
          step    = 1,
          default = 10,
        endnumeric;

        numeric varid = SA_SETUP.PdEnergyCh0Dimm1,
          prompt  = STRING_TOKEN (STR_PDENERGYCH0DIMM1_PROMPT),
          help    = STRING_TOKEN (STR_PDENERGYCH0DIMM1_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 63,
          step    = 1,
          default = 6,
        endnumeric;

        numeric varid = SA_SETUP.ActEnergyCh0Dimm1,
          prompt  = STRING_TOKEN (STR_ACTENERGYCH0DIMM1_PROMPT),
          help    = STRING_TOKEN (STR_ACTENERGYCH0DIMM1_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 172,
        endnumeric;

        numeric varid = SA_SETUP.RdEnergyCh0Dimm1,
          prompt  = STRING_TOKEN (STR_RDENERGYCH0DIMM1_PROMPT),
          help    = STRING_TOKEN (STR_RDENERGYCH0DIMM1_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 212,
        endnumeric;

        numeric varid = SA_SETUP.WrEnergyCh0Dimm1,
          prompt  = STRING_TOKEN (STR_WRENERGYCH0DIMM1_PROMPT),
          help    = STRING_TOKEN (STR_WRENERGYCH0DIMM1_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 221,
        endnumeric;

      SEPARATOR

        numeric varid = SA_SETUP.IdleEnergyCh1Dimm0,
          prompt  = STRING_TOKEN (STR_IDLEENERGYCH1DIMM0_PROMPT),
          help    = STRING_TOKEN (STR_IDLEENERGYCH1DIMM0_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 63,
          step    = 1,
          default = 10,
        endnumeric;

        numeric varid = SA_SETUP.PdEnergyCh1Dimm0,
          prompt  = STRING_TOKEN (STR_PDENERGYCH1DIMM0_PROMPT),
          help    = STRING_TOKEN (STR_PDENERGYCH1DIMM0_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 63,
          step    = 1,
          default = 6,
        endnumeric;

        numeric varid = SA_SETUP.ActEnergyCh1Dimm0,
          prompt  = STRING_TOKEN (STR_ACTENERGYCH1DIMM0_PROMPT),
          help    = STRING_TOKEN (STR_ACTENERGYCH1DIMM0_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 172,
        endnumeric;

        numeric varid = SA_SETUP.RdEnergyCh1Dimm0,
          prompt  = STRING_TOKEN (STR_RDENERGYCH1DIMM0_PROMPT),
          help    = STRING_TOKEN (STR_RDENERGYCH1DIMM0_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 212,
        endnumeric;

        numeric varid = SA_SETUP.WrEnergyCh1Dimm0,
          prompt  = STRING_TOKEN (STR_WRENERGYCH1DIMM0_PROMPT),
          help    = STRING_TOKEN (STR_WRENERGYCH1DIMM0_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 221,
        endnumeric;

      SEPARATOR

        numeric varid = SA_SETUP.IdleEnergyCh1Dimm1,
          prompt  = STRING_TOKEN (STR_IDLEENERGYCH1DIMM1_PROMPT),
          help    = STRING_TOKEN (STR_IDLEENERGYCH1DIMM1_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 63,
          step    = 1,
          default = 10,
        endnumeric;

        numeric varid = SA_SETUP.PdEnergyCh1Dimm1,
          prompt  = STRING_TOKEN (STR_PDENERGYCH1DIMM1_PROMPT),
          help    = STRING_TOKEN (STR_PDENERGYCH1DIMM1_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 63,
          step    = 1,
          default = 6,
        endnumeric;

        numeric varid = SA_SETUP.ActEnergyCh1Dimm1,
          prompt  = STRING_TOKEN (STR_ACTENERGYCH1DIMM1_PROMPT),
          help    = STRING_TOKEN (STR_ACTENERGYCH1DIMM1_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 172,
        endnumeric;

        numeric varid = SA_SETUP.RdEnergyCh1Dimm1,
          prompt  = STRING_TOKEN (STR_RDENERGYCH1DIMM1_PROMPT),
          help    = STRING_TOKEN (STR_RDENERGYCH1DIMM1_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 212,
        endnumeric;

        numeric varid = SA_SETUP.WrEnergyCh1Dimm1,
          prompt  = STRING_TOKEN (STR_WRENERGYCH1DIMM1_PROMPT),
          help    = STRING_TOKEN (STR_WRENERGYCH1DIMM1_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 221,
        endnumeric;

      endif;

    endform;

    form formid = AUTO_ID(MEMORY_THERMAL_REPORTING_FORM_ID),
    title       = STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING_TITLE);

      oneof varid   = SA_SETUP.LockPTMregs,
        prompt   = STRING_TOKEN (STR_PDWN_CONFIG_CTL_PROMPT),
        help     = STRING_TOKEN (STR_PDWN_CONFIG_CTL_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
      endoneof;

      SEPARATOR
      SUBTITLE(STRING_TOKEN(STR_MEMORY_THERMAL_REPORTING_SUBTITLE))
      SEPARATOR

      oneof varid   = SA_SETUP.EnableExtts,
        prompt   = STRING_TOKEN (STR_EXTTS_PROMPT),
        help     = STRING_TOKEN (STR_EXTTS_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

      oneof varid   = SA_SETUP.EnableCltm,
        prompt   = STRING_TOKEN (STR_CLTM_PROMPT),
        help     = STRING_TOKEN (STR_CLTM_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;

#ifdef UP_SERVER_FLAG
      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;
        grayoutif ideqval SA_SETUP.EnableCltm == 0;
          goto MEMORY_TSOD_FORM_ID,
            prompt  = STRING_TOKEN(STR_STSOD_TITLE),
            help    = STRING_TOKEN(STR_STSOD_HELP);
        endif;
          SEPARATOR
      endif;

    grayoutif ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;
#endif
      oneof varid   = SA_SETUP.EnableOltm,
        prompt   = STRING_TOKEN (STR_OLTM_PROMPT),
        help     = STRING_TOKEN (STR_OLTM_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = RESET_REQUIRED;
      endoneof;
#ifdef UP_SERVER_FLAG
    endif;
#endif

      oneof varid   = SA_SETUP.Ddr4SkipRefreshEn,
        prompt   = STRING_TOKEN (STR_DDR4_SKIP_REFRESH_EN_PROMPT),
        help     = STRING_TOKEN (STR_DDR4_SKIP_REFRESH_EN_HELP),
        option text = STRING_TOKEN(STR_ENABLED),  value = 1, flags = DEFAULT | MANUFACTURING |RESET_REQUIRED;
        option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = RESET_REQUIRED;
      endoneof;

      SEPARATOR
      SUBTITLE(STRING_TOKEN(STR_THERMAL_THRESHOLD))
      SEPARATOR

#ifdef UP_SERVER_FLAG
      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;
        oneof varid  = SA_SETUP.UserThresholdEnable,
          prompt   = STRING_TOKEN (STR_THRESHOLD_MANUAL_PROMPT),
          help     = STRING_TOKEN (STR_THRESHOLD_MANUAL_HELP),
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

    grayoutif (ideqval SA_SETUP.UserThresholdEnable == 0 AND ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer) ;
#endif
     numeric varid = SA_SETUP.WarmThresholdCh0Dimm0,
        prompt  = STRING_TOKEN (STR_WARMTHRCH0DIMM0_PROMPT),
        help    = STRING_TOKEN (STR_WARMTHRCH0DIMM0_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.WarmThresholdCh0Dimm1,
        prompt  = STRING_TOKEN (STR_WARMTHRCH0DIMM1_PROMPT),
        help    = STRING_TOKEN (STR_WARMTHRCH0DIMM1_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.HotThresholdCh0Dimm0,
        prompt  = STRING_TOKEN (STR_HOTTHRCH0DIMM0_PROMPT),
        help    = STRING_TOKEN (STR_HOTTHRCH0DIMM0_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.HotThresholdCh0Dimm1,
        prompt  = STRING_TOKEN (STR_HOTTHRCH0DIMM1_PROMPT),
        help    = STRING_TOKEN (STR_HOTTHRCH0DIMM1_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.WarmThresholdCh1Dimm0,
        prompt  = STRING_TOKEN (STR_WARMTHRCH1DIMM0_PROMPT),
        help    = STRING_TOKEN (STR_WARMTHRCH1DIMM0_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.WarmThresholdCh1Dimm1,
        prompt  = STRING_TOKEN (STR_WARMTHRCH1DIMM1_PROMPT),
        help    = STRING_TOKEN (STR_WARMTHRCH1DIMM1_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.HotThresholdCh1Dimm0,
        prompt  = STRING_TOKEN (STR_HOTTHRCH1DIMM0_PROMPT),
        help    = STRING_TOKEN (STR_HOTTHRCH1DIMM0_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.HotThresholdCh1Dimm1,
        prompt  = STRING_TOKEN (STR_HOTTHRCH1DIMM1_PROMPT),
        help    = STRING_TOKEN (STR_HOTTHRCH1DIMM1_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;
#ifdef UP_SERVER_FLAG
    endif;
#endif
      SEPARATOR
      SUBTITLE(STRING_TOKEN(STR_THERMAL_THROTTLE_BUDGET))
      SEPARATOR

#ifdef UP_SERVER_FLAG
      suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer;
        oneof varid  = SA_SETUP.UserBudgetEnable,
          prompt   = STRING_TOKEN (STR_BUDGET_MANUAL_PROMPT),
          help     = STRING_TOKEN (STR_BUDGET_MANUAL_HELP),
          option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
        endoneof;
      endif;

    grayoutif (ideqval SA_SETUP.UserBudgetEnable == 0 AND ideqval SETUP_VOLATILE_DATA.PlatformFlavor == FlavorUpServer);
#endif
      numeric varid = SA_SETUP.WarmBudgetCh0Dimm0,
        prompt  = STRING_TOKEN (STR_WARMBUDGETCH0DIMM0_PROMPT),
        help    = STRING_TOKEN (STR_WARMBUDGETCH0DIMM0_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.WarmBudgetCh0Dimm1,
        prompt  = STRING_TOKEN (STR_WARMBUDGETCH0DIMM1_PROMPT),
        help    = STRING_TOKEN (STR_WARMBUDGETCH0DIMM1_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.HotBudgetCh0Dimm0,
        prompt  = STRING_TOKEN (STR_HOTBUDGETCH0DIMM0_PROMPT),
        help    = STRING_TOKEN (STR_HOTBUDGETCH0DIMM0_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.HotBudgetCh0Dimm1,
        prompt  = STRING_TOKEN (STR_HOTBUDGETCH0DIMM1_PROMPT),
        help    = STRING_TOKEN (STR_HOTBUDGETCH0DIMM1_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.WarmBudgetCh1Dimm0,
        prompt  = STRING_TOKEN (STR_WARMBUDGETCH1DIMM0_PROMPT),
        help    = STRING_TOKEN (STR_WARMBUDGETCH1DIMM0_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.WarmBudgetCh1Dimm1,
        prompt  = STRING_TOKEN (STR_WARMBUDGETCH1DIMM1_PROMPT),
        help    = STRING_TOKEN (STR_WARMBUDGETCH1DIMM1_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.HotBudgetCh1Dimm0,
        prompt  = STRING_TOKEN (STR_HOTBUDGETCH1DIMM0_PROMPT),
        help    = STRING_TOKEN (STR_HOTBUDGETCH1DIMM0_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;

      numeric varid = SA_SETUP.HotBudgetCh1Dimm1,
        prompt  = STRING_TOKEN (STR_HOTBUDGETCH1DIMM1_PROMPT),
        help    = STRING_TOKEN (STR_HOTBUDGETCH1DIMM1_HELP),
        flags   = 0 | RESET_REQUIRED,
        minimum = 0,
        maximum = 255,
        step    = 1,
        default = 255,
      endnumeric;
#ifdef UP_SERVER_FLAG
     endif;

#endif // AMI_OVERRIDE_START >>> In order to avoid VfrParser Preprocessor Reference explains error.
    endform;

#ifdef UP_SERVER_FLAG // AMI_OVERRIDE_END <<< In order to avoid VfrParser Preprocessor Reference explains error.
    form formid = AUTO_ID(MEMORY_TSOD_FORM_ID),
    title       = STRING_TOKEN(STR_STSOD_TITLE);

      SUBTITLE(STRING_TOKEN(STR_STSOD_TITLE))
      SEPARATOR

      oneof varid  = SA_SETUP.TsodManualEnable,
        prompt   = STRING_TOKEN (STR_TEMP_TSOD_MANUAL_PROMPT),
        help     = STRING_TOKEN (STR_TEMP_TSOD_MANUAL_HELP),
        option text = STRING_TOKEN (STR_DISABLED_STRING), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
        option text = STRING_TOKEN (STR_ENABLED_STRING),  value = 1, flags = RESET_REQUIRED;
      endoneof;

       grayoutif ideqval SA_SETUP.TsodManualEnable == 0;
        numeric varid  = SA_SETUP.TsodThigMax,
          prompt  = STRING_TOKEN (STR_CLTM_THIGH_PROMPT),
          help    = STRING_TOKEN (STR_CLTM_THIGH_PROMPT_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,   // Minimum is 0MB
          maximum = 128, // Maximum is 1GB
          step    = 1,
          default = 93,
        endnumeric;

        numeric varid  = SA_SETUP.TsodTcritMax,
          prompt  = STRING_TOKEN (STR_CLTM_TCRITMAX_PROMPT),
          help    = STRING_TOKEN (STR_CLTM_TCRITMAX_PROMPT_HELP),
          flags   = RESET_REQUIRED,
          minimum = 0,   // Minimum is 0MB
          maximum = 128, // Maximum is 1GB
          step    = 1,
          default = 105,
        endnumeric;
       endif;

      checkbox varid = SA_SETUP.TsodEventMode,
       prompt = STRING_TOKEN(STR_EVENT_MODE_PROMPT),
       help   = STRING_TOKEN(STR_EVENT_MODE_HELP),
       flags  = CHECKBOX_DEFAULT | RESET_REQUIRED,
       key    = 0,
      endcheckbox;

      checkbox varid = SA_SETUP.TsodEventPolarity,
       prompt = STRING_TOKEN(STR_POLARITY_PROMPT),
       help   = STRING_TOKEN(STR_POLARITY_MODE_HELP),
       flags  = 0 | RESET_REQUIRED,
       key    = 0,
      endcheckbox;

      checkbox varid = SA_SETUP.TsodCriticalEventOnly,
       prompt = STRING_TOKEN(STR_CRITICAL_EVENT_ONLY_PROMPT),
       help   = STRING_TOKEN(STR_CRITICAL_EVENT_ONLY_HELP),
       flags  = CHECKBOX_DEFAULT | RESET_REQUIRED,
       key    = 0,
      endcheckbox;

      checkbox varid = SA_SETUP.TsodEventOutputControl,
       prompt = STRING_TOKEN(STR_EVENT_OUTPUT_CONTROL_PROMPT),
       help   = STRING_TOKEN(STR_EVENT_OUTPUT_CONTROL_HELP),
       flags  = CHECKBOX_DEFAULT | RESET_REQUIRED,
       key    = 0,
      endcheckbox;

      checkbox varid = SA_SETUP.TsodAlarmwindowLockBit,
       prompt = STRING_TOKEN(STR_ALARM_WINDOW_LOCK_PROMPT),
       help   = STRING_TOKEN(STR_ALARM_WINDOW_LOCK_HELP),
       flags  = 0 | RESET_REQUIRED,
       key    = 0,
      endcheckbox;

      checkbox varid = SA_SETUP.TsodCriticaltripLockBit,
       prompt = STRING_TOKEN(STR_CRITICAL_TRIP_LOCK_PROMPT),
       help   = STRING_TOKEN(STR_CRITICAL_TRIP_LOCK_HELP),
       flags  = 0 | RESET_REQUIRED,
       key    = 0,
      endcheckbox;

      checkbox varid = SA_SETUP.TsodShutdownMode,
       prompt = STRING_TOKEN(STR_SHUTDOWN_MODE_PROMPT),
       help   = STRING_TOKEN(STR_SHUTDOWN_MODE_HELP),
       flags  = 0 | RESET_REQUIRED,
       key    = 0,
      endcheckbox;
#endif

#ifdef UP_SERVER_FLAG // AMI_OVERRIDE_START >>> In order to avoid VfrParser Preprocessor Reference explains error.
    endform;
#endif // AMI_OVERRIDE_END <<< In order to avoid VfrParser Preprocessor Reference explains error.

    form formid = AUTO_ID(MEMORY_RAPL_FORM_ID),
    title       = STRING_TOKEN(STR_MEMORY_RAPL_TITLE);

      SUBTITLE(STRING_TOKEN(STR_MEMORY_RAPL_SUBTITLE))
      SEPARATOR

      grayoutif (ideqval SA_SETUP.UserPowerWeightsEn == 0);
        numeric varid = SA_SETUP.RaplPwrFlCh0,
          prompt  = STRING_TOKEN (STR_RAPLPWRFLCH0_PROMPT),
          help    = STRING_TOKEN (STR_RAPLPWRFLCH0_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 0,
        endnumeric;

        numeric varid = SA_SETUP.RaplPwrFlCh1,
          prompt  = STRING_TOKEN (STR_RAPLPWRFLCH1_PROMPT),
          help    = STRING_TOKEN (STR_RAPLPWRFLCH1_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 255,
          step    = 1,
          default = 0,
        endnumeric;
      endif;

      SEPARATOR

        oneof varid   = SA_SETUP.RaplLim2Lock,
          prompt      = STRING_TOKEN(STR_RAPLLIM2LOCK_PROMPT),
          help        = STRING_TOKEN(STR_RAPLLIM2LOCK_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;

        oneof varid   = SA_SETUP.RaplLim1Ena,
          prompt      = STRING_TOKEN(STR_RAPLLIM1ENA_PROMPT),
          help        = STRING_TOKEN(STR_RAPLLIM1ENA_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;

        numeric varid = SA_SETUP.RaplLim1Pwr,
          prompt  = STRING_TOKEN (STR_RAPLLIM1PWR_PROMPT),
          help    = STRING_TOKEN (STR_RAPLLIM1PWR_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 16383,
          step    = 1,
          default value = 0,
        endnumeric;

        numeric varid = SA_SETUP.RaplLim1WindX,
          prompt  = STRING_TOKEN (STR_RAPLLIM1WINDX_PROMPT),
          help    = STRING_TOKEN (STR_RAPLLIM1WINDX_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 3,
          step    = 1,
          default value = 0,
        endnumeric;

        numeric varid = SA_SETUP.RaplLim1WindY,
          prompt  = STRING_TOKEN (STR_RAPLLIM1WINDY_PROMPT),
          help    = STRING_TOKEN (STR_RAPLLIM1WINDY_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 31,
          step    = 1,
          default value = 0,
        endnumeric;

        SEPARATOR

        oneof varid   = SA_SETUP.RaplLim2Ena,
          prompt      = STRING_TOKEN(STR_RAPLLIM2ENA_PROMPT),
          help        = STRING_TOKEN(STR_RAPLLIM2ENA_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = 0, flags = DEFAULT | MANUFACTURING | RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED), value = 1, flags = RESET_REQUIRED;
        endoneof;

        numeric varid = SA_SETUP.RaplLim2Pwr,
          prompt  = STRING_TOKEN (STR_RAPLLIM2PWR_PROMPT),
          help    = STRING_TOKEN (STR_RAPLLIM2PWR_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 16383,
          step    = 1,
          default = 222,
        endnumeric;

        numeric varid = SA_SETUP.RaplLim2WindX,
          prompt  = STRING_TOKEN (STR_RAPLLIM2WINDX_PROMPT),
          help    = STRING_TOKEN (STR_RAPLLIM2WINDX_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 3,
          step    = 1,
          default = 1,
        endnumeric;

        numeric varid = SA_SETUP.RaplLim2WindY,
          prompt  = STRING_TOKEN (STR_RAPLLIM2WINDY_PROMPT),
          help    = STRING_TOKEN (STR_RAPLLIM2WINDY_HELP),
          flags   = 0 | RESET_REQUIRED,
          minimum = 0,
          maximum = 31,
          step    = 1,
          default = 10,
        endnumeric;

    endform;
// AMI_OVERRIDE_START 
#endif // end FORM_SET_FORM
#endif // end CHIPSET_SET_FORM
// AMI_OVERRIDE_END  





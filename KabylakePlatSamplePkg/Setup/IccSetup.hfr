/** @file

 @copyright
  INTEL CONFIDENTIAL
  Copyright 2014 - 2017 Intel Corporation.

  The source code contained or described herein and all documents related to the
  source code ("Material") are owned by Intel Corporation or its suppliers or
  licensors. Title to the Material remains with Intel Corporation or its suppliers
  and licensors. The Material may contain trade secrets and proprietary and
  confidential information of Intel Corporation and its suppliers and licensors,
  and is protected by worldwide copyright and trade secret laws and treaty
  provisions. No part of the Material may be used, copied, reproduced, modified,
  published, uploaded, posted, transmitted, distributed, or disclosed in any way
  without Intel's prior express written permission.

  No license under any patent, copyright, trade secret or other intellectual
  property right is granted to or conferred upon you by disclosure or delivery
  of the Materials, either expressly, by implication, inducement, estoppel or
  otherwise. Any license under such intellectual property rights must be
  express and approved by Intel in writing.

  Unless otherwise agreed by Intel in writing, you may not remove or alter
  this notice or any other notice embedded in Materials by Intel or
  Intel's suppliers or licensors in any way.

  This file contains a 'Sample Driver' and is licensed as such under the terms
  of your license agreement with Intel or your vendor. This file may be modified
  by the user, subject to the additional terms of the license agreement.

@par Specification
**/

// AMI_OVERRIDE_START
#ifdef ADVANCED_FORM_SET

#ifdef FORM_SET_TYPEDEF
  #include <IccSetupData.h>
#endif

#ifdef FORM_SET_VARSTORE
  varstore ICC_SETUP_DATA,
    key   = AUTO_ID(ICC_SETUP_DATA_ID),
    name  = IccAdvancedSetupDataVar,
    guid  = INTEL_ICC_GUID;
#endif

#ifdef FORM_SET_GOTO
  // Define goto commands for the forms defined in this file
  goto ICC_FORM_ID,
    prompt  = STRING_TOKEN(STR_ICC_FORM),
    help    = STRING_TOKEN(STR_ICC_FORM);
#endif

#ifdef FORM_SET_FORM
// AMI_OVERRIDE_END   
    form formid = AUTO_ID(ICC_FORM_ID),  // AMI_OVERRIDE
    title = STRING_TOKEN(STR_ICC_FORM);
 
    oneof varid     = SETUP_DATA.IccWdtEnabled,
        prompt      = STRING_TOKEN(STR_ICC_WDT_ENABLE),
        help        = STRING_TOKEN(STR_ICC_WDT_ENABLE_HELP),
        option text = STRING_TOKEN(STR_DISABLED), value = OPTION_DISABLED, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ENABLED),  value = OPTION_ENABLED, flags = RESET_REQUIRED;
    endoneof;
    
    grayoutif ideqval ICC_SETUP_DATA.AllowAdvancedOptions == DONT_DISPLAY;
    oneof varid     = ICC_SETUP_DATA.RegLock,
        prompt      = STRING_TOKEN(STR_ICC_LOCK),
        help        = STRING_TOKEN(STR_ICC_LOCK_HELP),
        option text = STRING_TOKEN(STR_ICC_LOCK_DEFAULT), value = OPTION_LOCK_DEFAULT, flags = DEFAULT | RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ICC_LOCK_ALL), value = OPTION_LOCK_ALL, flags = RESET_REQUIRED;
        option text = STRING_TOKEN(STR_ICC_UNLOCK_ALL), value = OPTION_UNLOCK_ALL, flags = RESET_REQUIRED;
    endoneof;
    endif;

    grayoutif ideqval ICC_SETUP_DATA.ShowProfile == DONT_DISPLAY;
    numeric varid = ICC_SETUP_DATA.Profile,
        prompt    = STRING_TOKEN(STR_ICC_PROFILE),
        help      = STRING_TOKEN(STR_ICC_PROFILE_HELP),
        flags     = RESET_REQUIRED | INTERACTIVE,
        key       = AUTO_ID(KEY_ICC_PROFILE),  // AMI_OVERRIDE
        minimum   = 0,
        maximum   = 15,
        step      = 1,
        default   = 0,
    endnumeric;
    endif;

    suppressif NOT ideqval SETUP_VOLATILE_DATA.PlatformType == TypeUltUlx;
      oneof varid     = SETUP_DATA.IccPllShutdownEnabled,
          prompt      = STRING_TOKEN(STR_ICC_PLL_SHUTDOWN),
          help        = STRING_TOKEN(STR_ICC_PLL_SHUTDOWN_HELP),
          option text = STRING_TOKEN(STR_DISABLED), value = OPTION_DISABLED, flags = RESET_REQUIRED;
          option text = STRING_TOKEN(STR_ENABLED),  value = OPTION_ENABLED, flags = DEFAULT | RESET_REQUIRED;
      endoneof;
    endif;

    SEPARATOR

    suppressif ideqval ICC_SETUP_DATA.AllowAdvancedOptions == DONT_DISPLAY OR
               ideqval ICC_SETUP_DATA.ShowClock[CLOCK1] == DONT_DISPLAY;
        // 
        // CLOCK 2 SETTINGS
        //
        SUBTITLE(STRING_TOKEN(STR_ICC_CLOCK1_TITLE))
          text
              help   = STRING_TOKEN(STR_EMPTY),
              text   = STRING_TOKEN(STR_ICC_CLOCK_DEFAULT_SETTINGS),
              text   = STRING_TOKEN(STR_ICC_CLOCK1_DEFAULT_TEXT),
              flags  = 0, key = 0;

          text
              help   = STRING_TOKEN(STR_EMPTY),
              text   = STRING_TOKEN(STR_ICC_CLOCK_FREQ_RANGE),
              text   = STRING_TOKEN(STR_ICC_CLOCK1_FREQ_RANGE_TEXT),
              flags  = 0, key = 0;

          text
              help   = STRING_TOKEN(STR_EMPTY),
              text   = STRING_TOKEN(STR_ICC_CLOCK_MAX_SPREAD),
              text   = STRING_TOKEN(STR_ICC_CLOCK1_MAX_SPREAD_TEXT),
              flags  = 0, key = 0;

          text
              help   = STRING_TOKEN(STR_EMPTY),
              text   = STRING_TOKEN(STR_ICC_CLOCK_SPREAD_ADJUSTMENTS),
              text   = STRING_TOKEN(STR_ICC_CLOCK1_SPREAD_ADJUSTMENTS_TEXT),
              flags  = 0, key = 0;

      suppressif ideqval ICC_SETUP_DATA.ShowFrequency[CLOCK1] == DONT_DISPLAY;
          numeric varid = ICC_SETUP_DATA.Frequency[CLOCK1],
              prompt    = STRING_TOKEN(STR_ICC_CLOCK_FREQUENCY1),
              help      = STRING_TOKEN(STR_ICC_CLOCK_FREQUENCY_HELP),
// AMI_OVERRIDE_OVERCLOCK0012_START >>>
//              flags     = INTERACTIVE,
              flags     = RESET_REQUIRED | INTERACTIVE,
// AMI_OVERRIDE_OVERCLOCK0012_END <<<
              key       = AUTO_ID(KEY_ICC_FREQ2),  // AMI_OVERRIDE
              minimum   = 0,
              maximum   = 65535,
              step      = 1,
              default   = 0, //this value is ignored, default values are retrieved from C code
          endnumeric;

          oneof varid     = SA_SETUP.BclkChangeWarmReset,
              prompt      = STRING_TOKEN(STR_ICC_BCLK_CHANGE_WARMRESET),
              help        = STRING_TOKEN(STR_ICC_BCLK_CHANGE_WARMRESET_HELP),
              option text = STRING_TOKEN(STR_ENABLED), value = OPTION_ENABLED, flags = DEFAULT | RESET_REQUIRED;
              option text = STRING_TOKEN(STR_DISABLED), value = OPTION_DISABLED, flags = RESET_REQUIRED;
          endoneof;

          suppressif ideqval SA_SETUP.BclkChangeWarmReset == 1;
              oneof varid     = SA_SETUP.BclkChangeContinues,
                  prompt      = STRING_TOKEN(STR_ICC_BCLK_CHANGE_CONTINUES),
                  help        = STRING_TOKEN(STR_ICC_BCLK_CHANGE_CONTINUES_HELP),
                  option text = STRING_TOKEN(STR_BCLK_CHANGE_REAL_TIME), value = ICC_BCLK_REAL_TIME, flags = DEFAULT;
                  option text = STRING_TOKEN(STR_BCLK_CHANGE_PERM_NO_RESET), value = ICC_BCLK_PERM_NO_WR, flags = 0;
              endoneof;
          endif;
      endif;

      suppressif ideqval ICC_SETUP_DATA.ShowClock[CLOCK1] == DONT_DISPLAY;
            numeric varid = ICC_SETUP_DATA.Spread[CLOCK1],
                prompt    = STRING_TOKEN(STR_ICC_CLOCK_SPREAD_PERCENT1),
                help      = STRING_TOKEN(STR_ICC_CLOCK_SPREAD_PERCENT_HELP),
// AMI_OVERRIDE_OVERCLOCK0012_START  >>>
//                flags     = INTERACTIVE,
                flags     = RESET_REQUIRED | INTERACTIVE,
// AMI_OVERRIDE_OVERCLOCK0012_END <<<
                key       = AUTO_ID(KEY_ICC_SPREAD2),  // AMI_OVERRIDE
                minimum   = 0,
                maximum   = 255,
                step      = 1,
                default   = 0, //this value is ignored, default values are retrieved from C code
            endnumeric;
          endif;
    endif;
    SEPARATOR

    suppressif ideqval ICC_SETUP_DATA.AllowAdvancedOptions == DONT_DISPLAY OR
               ideqval ICC_SETUP_DATA.ShowClock[CLOCK0] == DONT_DISPLAY;
        // 
        // CLOCK 3 SETTINGS
        //
        SUBTITLE(STRING_TOKEN(STR_ICC_CLOCK0_TITLE))
          text
              help   = STRING_TOKEN(STR_EMPTY),
              text   = STRING_TOKEN(STR_ICC_CLOCK_DEFAULT_SETTINGS),
              text   = STRING_TOKEN(STR_ICC_CLOCK0_DEFAULT_TEXT),
              flags  = 0, key = 0;

          text
              help   = STRING_TOKEN(STR_EMPTY),
              text   = STRING_TOKEN(STR_ICC_CLOCK_FREQ_RANGE),
              text   = STRING_TOKEN(STR_ICC_CLOCK0_FREQ_RANGE_TEXT),
              flags  = 0, key = 0;

          text
              help   = STRING_TOKEN(STR_EMPTY),
              text   = STRING_TOKEN(STR_ICC_CLOCK_MAX_SPREAD),
              text   = STRING_TOKEN(STR_ICC_CLOCK0_MAX_SPREAD_TEXT),
              flags  = 0, key = 0;

          text
              help   = STRING_TOKEN(STR_EMPTY),
              text   = STRING_TOKEN(STR_ICC_CLOCK_SPREAD_ADJUSTMENTS),
              text   = STRING_TOKEN(STR_ICC_CLOCK0_SPREAD_ADJUSTMENTS_TEXT),
              flags  = 0, key = 0;
      endif;
      
    suppressif ideqval ICC_SETUP_DATA.AllowAdvancedOptions == DONT_DISPLAY OR
               ideqval ICC_SETUP_DATA.ShowClock[CLOCK0] == DONT_DISPLAY OR
               ideqval ICC_SETUP_DATA.ShowFrequency[CLOCK0] == DONT_DISPLAY;
            numeric varid = ICC_SETUP_DATA.Frequency[CLOCK0],
                prompt    = STRING_TOKEN(STR_ICC_CLOCK_FREQUENCY2),
                help      = STRING_TOKEN(STR_ICC_CLOCK_FREQUENCY_HELP),
                flags     = INTERACTIVE,
                key       = AUTO_ID(KEY_ICC_FREQ3),  // AMI_OVERRIDE
                minimum   = 0,
                maximum   = 65535,
                step      = 1,
                default   = 0, //this value is ignored, default values are retrieved from C code
            endnumeric;
          endif;

    suppressif ideqval ICC_SETUP_DATA.AllowAdvancedOptions == DONT_DISPLAY OR
               ideqval ICC_SETUP_DATA.ShowSpread[CLOCK0] == DONT_DISPLAY OR
               ideqval ICC_SETUP_DATA.ShowClock[CLOCK0] == DONT_DISPLAY;
            numeric
                varid = ICC_SETUP_DATA.Spread[CLOCK0],
                prompt    = STRING_TOKEN(STR_ICC_CLOCK_SPREAD_PERCENT2),
                help      = STRING_TOKEN(STR_ICC_CLOCK_SPREAD_PERCENT_HELP),
                flags     = INTERACTIVE,
                key       = AUTO_ID(KEY_ICC_SPREAD3),  // AMI_OVERRIDE
                minimum   = 0,
                maximum   = 255,
                step      = 1,
                default   = 0, //this value is ignored, default values are retrieved from C code
            endnumeric;
          endif;

  // Questions that provide default values for some vaiables used in suppressifs
    suppressif TRUE;

      numeric varid = ICC_SETUP_DATA.ShowClock[CLOCK1],
        prompt = STRING_TOKEN(0), help = STRING_TOKEN(0), flags = 0, minimum = DONT_DISPLAY, maximum = DISPLAY,
      endnumeric;
      numeric varid = ICC_SETUP_DATA.ShowClock[CLOCK0],
        prompt = STRING_TOKEN(0), help = STRING_TOKEN(0), flags = 0, minimum = DONT_DISPLAY, maximum = DISPLAY,
      endnumeric;
      numeric varid = ICC_SETUP_DATA.ShowFrequency[CLOCK1],
        prompt = STRING_TOKEN(0), help = STRING_TOKEN(0), flags = 0, minimum = DONT_DISPLAY, maximum = DISPLAY,
      endnumeric;
      numeric varid = ICC_SETUP_DATA.ShowFrequency[CLOCK0],
        prompt = STRING_TOKEN(0), help = STRING_TOKEN(0), flags = 0, minimum = DONT_DISPLAY, maximum = DISPLAY,
      endnumeric;
      numeric varid = ICC_SETUP_DATA.ShowSpread[CLOCK1],
        prompt = STRING_TOKEN(0), help = STRING_TOKEN(0), flags = 0, minimum = DONT_DISPLAY, maximum = DISPLAY,
      endnumeric;
      numeric varid = ICC_SETUP_DATA.ShowSpread[CLOCK0],
        prompt = STRING_TOKEN(0), help = STRING_TOKEN(0), flags = 0, minimum = DONT_DISPLAY, maximum = DISPLAY,
      endnumeric;
      numeric varid = ICC_SETUP_DATA.ShowProfile,
        prompt = STRING_TOKEN(0), help = STRING_TOKEN(0), flags = 0, minimum = DONT_DISPLAY, maximum = DISPLAY,
      endnumeric;
      numeric varid = ICC_SETUP_DATA.AllowAdvancedOptions,
        prompt = STRING_TOKEN(0), help = STRING_TOKEN(0), flags = 0, minimum = DONT_DISPLAY, maximum = DISPLAY,
      endnumeric;
    endif;
    
  endform;

// AMI_OVERRIDE_START
#endif
#endif
// AMI_OVERRIDE_END 
